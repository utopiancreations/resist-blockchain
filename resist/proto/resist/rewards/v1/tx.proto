syntax = "proto3";

package resist.rewards.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "resist/rewards/v1/params.proto";

option go_package = "resist/x/rewards/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // RegisterNode defines the RegisterNode RPC.
  rpc RegisterNode(MsgRegisterNode) returns (MsgRegisterNodeResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "resist/x/rewards/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.

  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgRegisterNode defines the MsgRegisterNode message.
message MsgRegisterNode {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string node_id = 2;
  string node_type = 3;
  uint64 stake_amount = 4;
}

// MsgRegisterNodeResponse defines the MsgRegisterNodeResponse message.
message MsgRegisterNodeResponse {}
