// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: resist/posts/v1/content_distribution.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ContentDistribution handles decentralized content storage and sync
type ContentDistribution struct {
	ContentId     string              `protobuf:"bytes,1,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	IpfsHash      string              `protobuf:"bytes,2,opt,name=ipfs_hash,json=ipfsHash,proto3" json:"ipfs_hash,omitempty"`
	MirrorNodes   []string            `protobuf:"bytes,3,rep,name=mirror_nodes,json=mirrorNodes,proto3" json:"mirror_nodes,omitempty"`
	SignalChannel string              `protobuf:"bytes,4,opt,name=signal_channel,json=signalChannel,proto3" json:"signal_channel,omitempty"`
	Replication   *ContentReplication `protobuf:"bytes,5,opt,name=replication,proto3" json:"replication,omitempty"`
	CreatedAt     int64               `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	LastSync      int64               `protobuf:"varint,7,opt,name=last_sync,json=lastSync,proto3" json:"last_sync,omitempty"`
}

func (m *ContentDistribution) Reset()         { *m = ContentDistribution{} }
func (m *ContentDistribution) String() string { return proto.CompactTextString(m) }
func (*ContentDistribution) ProtoMessage()    {}
func (*ContentDistribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4989ec9bddf2071, []int{0}
}
func (m *ContentDistribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContentDistribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContentDistribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContentDistribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentDistribution.Merge(m, src)
}
func (m *ContentDistribution) XXX_Size() int {
	return m.Size()
}
func (m *ContentDistribution) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentDistribution.DiscardUnknown(m)
}

var xxx_messageInfo_ContentDistribution proto.InternalMessageInfo

func (m *ContentDistribution) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *ContentDistribution) GetIpfsHash() string {
	if m != nil {
		return m.IpfsHash
	}
	return ""
}

func (m *ContentDistribution) GetMirrorNodes() []string {
	if m != nil {
		return m.MirrorNodes
	}
	return nil
}

func (m *ContentDistribution) GetSignalChannel() string {
	if m != nil {
		return m.SignalChannel
	}
	return ""
}

func (m *ContentDistribution) GetReplication() *ContentReplication {
	if m != nil {
		return m.Replication
	}
	return nil
}

func (m *ContentDistribution) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *ContentDistribution) GetLastSync() int64 {
	if m != nil {
		return m.LastSync
	}
	return 0
}

// ContentReplication defines replication strategy and status
type ContentReplication struct {
	TargetReplicas      uint32   `protobuf:"varint,1,opt,name=target_replicas,json=targetReplicas,proto3" json:"target_replicas,omitempty"`
	CurrentReplicas     uint32   `protobuf:"varint,2,opt,name=current_replicas,json=currentReplicas,proto3" json:"current_replicas,omitempty"`
	ReplicaNodes        []string `protobuf:"bytes,3,rep,name=replica_nodes,json=replicaNodes,proto3" json:"replica_nodes,omitempty"`
	ReplicationStrategy string   `protobuf:"bytes,4,opt,name=replication_strategy,json=replicationStrategy,proto3" json:"replication_strategy,omitempty"`
	TotalSizeBytes      uint64   `protobuf:"varint,5,opt,name=total_size_bytes,json=totalSizeBytes,proto3" json:"total_size_bytes,omitempty"`
}

func (m *ContentReplication) Reset()         { *m = ContentReplication{} }
func (m *ContentReplication) String() string { return proto.CompactTextString(m) }
func (*ContentReplication) ProtoMessage()    {}
func (*ContentReplication) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4989ec9bddf2071, []int{1}
}
func (m *ContentReplication) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContentReplication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContentReplication.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContentReplication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentReplication.Merge(m, src)
}
func (m *ContentReplication) XXX_Size() int {
	return m.Size()
}
func (m *ContentReplication) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentReplication.DiscardUnknown(m)
}

var xxx_messageInfo_ContentReplication proto.InternalMessageInfo

func (m *ContentReplication) GetTargetReplicas() uint32 {
	if m != nil {
		return m.TargetReplicas
	}
	return 0
}

func (m *ContentReplication) GetCurrentReplicas() uint32 {
	if m != nil {
		return m.CurrentReplicas
	}
	return 0
}

func (m *ContentReplication) GetReplicaNodes() []string {
	if m != nil {
		return m.ReplicaNodes
	}
	return nil
}

func (m *ContentReplication) GetReplicationStrategy() string {
	if m != nil {
		return m.ReplicationStrategy
	}
	return ""
}

func (m *ContentReplication) GetTotalSizeBytes() uint64 {
	if m != nil {
		return m.TotalSizeBytes
	}
	return 0
}

// HubSync manages synchronization between hubs
type HubSync struct {
	SyncId           string   `protobuf:"bytes,1,opt,name=sync_id,json=syncId,proto3" json:"sync_id,omitempty"`
	SourceNode       string   `protobuf:"bytes,2,opt,name=source_node,json=sourceNode,proto3" json:"source_node,omitempty"`
	TargetNode       string   `protobuf:"bytes,3,opt,name=target_node,json=targetNode,proto3" json:"target_node,omitempty"`
	ContentIds       []string `protobuf:"bytes,4,rep,name=content_ids,json=contentIds,proto3" json:"content_ids,omitempty"`
	Status           string   `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	StartedAt        int64    `protobuf:"varint,6,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	CompletedAt      int64    `protobuf:"varint,7,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	BytesTransferred uint64   `protobuf:"varint,8,opt,name=bytes_transferred,json=bytesTransferred,proto3" json:"bytes_transferred,omitempty"`
	SyncMethod       string   `protobuf:"bytes,9,opt,name=sync_method,json=syncMethod,proto3" json:"sync_method,omitempty"`
}

func (m *HubSync) Reset()         { *m = HubSync{} }
func (m *HubSync) String() string { return proto.CompactTextString(m) }
func (*HubSync) ProtoMessage()    {}
func (*HubSync) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4989ec9bddf2071, []int{2}
}
func (m *HubSync) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HubSync) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HubSync.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HubSync) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HubSync.Merge(m, src)
}
func (m *HubSync) XXX_Size() int {
	return m.Size()
}
func (m *HubSync) XXX_DiscardUnknown() {
	xxx_messageInfo_HubSync.DiscardUnknown(m)
}

var xxx_messageInfo_HubSync proto.InternalMessageInfo

func (m *HubSync) GetSyncId() string {
	if m != nil {
		return m.SyncId
	}
	return ""
}

func (m *HubSync) GetSourceNode() string {
	if m != nil {
		return m.SourceNode
	}
	return ""
}

func (m *HubSync) GetTargetNode() string {
	if m != nil {
		return m.TargetNode
	}
	return ""
}

func (m *HubSync) GetContentIds() []string {
	if m != nil {
		return m.ContentIds
	}
	return nil
}

func (m *HubSync) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *HubSync) GetStartedAt() int64 {
	if m != nil {
		return m.StartedAt
	}
	return 0
}

func (m *HubSync) GetCompletedAt() int64 {
	if m != nil {
		return m.CompletedAt
	}
	return 0
}

func (m *HubSync) GetBytesTransferred() uint64 {
	if m != nil {
		return m.BytesTransferred
	}
	return 0
}

func (m *HubSync) GetSyncMethod() string {
	if m != nil {
		return m.SyncMethod
	}
	return ""
}

// SignalMessage for secure node-to-node communication
type SignalMessage struct {
	MessageId        string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	SenderNode       string `protobuf:"bytes,2,opt,name=sender_node,json=senderNode,proto3" json:"sender_node,omitempty"`
	RecipientNode    string `protobuf:"bytes,3,opt,name=recipient_node,json=recipientNode,proto3" json:"recipient_node,omitempty"`
	ChannelId        string `protobuf:"bytes,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	EncryptedPayload []byte `protobuf:"bytes,5,opt,name=encrypted_payload,json=encryptedPayload,proto3" json:"encrypted_payload,omitempty"`
	MessageType      string `protobuf:"bytes,6,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	Timestamp        int64  `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature        string `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SignalMessage) Reset()         { *m = SignalMessage{} }
func (m *SignalMessage) String() string { return proto.CompactTextString(m) }
func (*SignalMessage) ProtoMessage()    {}
func (*SignalMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4989ec9bddf2071, []int{3}
}
func (m *SignalMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignalMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignalMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignalMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalMessage.Merge(m, src)
}
func (m *SignalMessage) XXX_Size() int {
	return m.Size()
}
func (m *SignalMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SignalMessage proto.InternalMessageInfo

func (m *SignalMessage) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *SignalMessage) GetSenderNode() string {
	if m != nil {
		return m.SenderNode
	}
	return ""
}

func (m *SignalMessage) GetRecipientNode() string {
	if m != nil {
		return m.RecipientNode
	}
	return ""
}

func (m *SignalMessage) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *SignalMessage) GetEncryptedPayload() []byte {
	if m != nil {
		return m.EncryptedPayload
	}
	return nil
}

func (m *SignalMessage) GetMessageType() string {
	if m != nil {
		return m.MessageType
	}
	return ""
}

func (m *SignalMessage) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *SignalMessage) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

// ContentMetadata for efficient discovery and routing
type ContentMetadata struct {
	ContentId      string   `protobuf:"bytes,1,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	ContentType    string   `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	Title          string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description    string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Tags           []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	SizeBytes      uint64   `protobuf:"varint,6,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	MimeType       string   `protobuf:"bytes,7,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Language       string   `protobuf:"bytes,8,opt,name=language,proto3" json:"language,omitempty"`
	IsNsfw         bool     `protobuf:"varint,9,opt,name=is_nsfw,json=isNsfw,proto3" json:"is_nsfw,omitempty"`
	CreatedAt      int64    `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Creator        string   `protobuf:"bytes,11,opt,name=creator,proto3" json:"creator,omitempty"`
	ViewCount      uint64   `protobuf:"varint,12,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"`
	RelatedContent []string `protobuf:"bytes,13,rep,name=related_content,json=relatedContent,proto3" json:"related_content,omitempty"`
}

func (m *ContentMetadata) Reset()         { *m = ContentMetadata{} }
func (m *ContentMetadata) String() string { return proto.CompactTextString(m) }
func (*ContentMetadata) ProtoMessage()    {}
func (*ContentMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4989ec9bddf2071, []int{4}
}
func (m *ContentMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContentMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContentMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContentMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContentMetadata.Merge(m, src)
}
func (m *ContentMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ContentMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ContentMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ContentMetadata proto.InternalMessageInfo

func (m *ContentMetadata) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *ContentMetadata) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *ContentMetadata) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ContentMetadata) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ContentMetadata) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ContentMetadata) GetSizeBytes() uint64 {
	if m != nil {
		return m.SizeBytes
	}
	return 0
}

func (m *ContentMetadata) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *ContentMetadata) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *ContentMetadata) GetIsNsfw() bool {
	if m != nil {
		return m.IsNsfw
	}
	return false
}

func (m *ContentMetadata) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *ContentMetadata) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ContentMetadata) GetViewCount() uint64 {
	if m != nil {
		return m.ViewCount
	}
	return 0
}

func (m *ContentMetadata) GetRelatedContent() []string {
	if m != nil {
		return m.RelatedContent
	}
	return nil
}

func init() {
	proto.RegisterType((*ContentDistribution)(nil), "resist.posts.v1.ContentDistribution")
	proto.RegisterType((*ContentReplication)(nil), "resist.posts.v1.ContentReplication")
	proto.RegisterType((*HubSync)(nil), "resist.posts.v1.HubSync")
	proto.RegisterType((*SignalMessage)(nil), "resist.posts.v1.SignalMessage")
	proto.RegisterType((*ContentMetadata)(nil), "resist.posts.v1.ContentMetadata")
}

func init() {
	proto.RegisterFile("resist/posts/v1/content_distribution.proto", fileDescriptor_f4989ec9bddf2071)
}

var fileDescriptor_f4989ec9bddf2071 = []byte{
	// 832 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x95, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0xc7, 0xe3, 0x8f, 0xb5, 0x3d, 0xed, 0xd8, 0x09, 0xbd, 0x11, 0x8c, 0xf8, 0x30, 0xc6, 0xab,
	0x15, 0x06, 0x24, 0x47, 0x81, 0x27, 0xc8, 0x06, 0xa4, 0xcd, 0x21, 0x2b, 0x34, 0xd9, 0x13, 0x97,
	0x51, 0x67, 0xa6, 0x6d, 0xb7, 0x34, 0xee, 0x19, 0x75, 0x95, 0x13, 0x66, 0x9f, 0x02, 0x5e, 0x00,
	0x89, 0x07, 0xe0, 0x3d, 0x38, 0xee, 0x91, 0x23, 0x4a, 0x6e, 0x3c, 0x05, 0xaa, 0xea, 0xf6, 0x47,
	0xc2, 0x81, 0xdb, 0xf4, 0xaf, 0xfe, 0xd3, 0x53, 0xf5, 0xef, 0xaa, 0x1e, 0xf1, 0xb5, 0xd3, 0x60,
	0x00, 0x4f, 0xab, 0x12, 0x10, 0x4e, 0x6f, 0xcf, 0x4e, 0xb3, 0xd2, 0xa2, 0xb6, 0x98, 0xe6, 0x06,
	0xd0, 0x99, 0x9b, 0x35, 0x9a, 0xd2, 0xce, 0x2a, 0x57, 0x62, 0x29, 0x8f, 0xbc, 0x76, 0xc6, 0xda,
	0xd9, 0xed, 0xd9, 0xe4, 0xb7, 0xa6, 0x78, 0x7e, 0xe1, 0xf5, 0xdf, 0xef, 0xc9, 0xe5, 0x67, 0x42,
	0x6c, 0xb6, 0x31, 0x79, 0xdc, 0x18, 0x37, 0xa6, 0x51, 0x12, 0x05, 0x72, 0x99, 0xcb, 0x4f, 0x44,
	0x64, 0xaa, 0x39, 0xa4, 0x4b, 0x05, 0xcb, 0xb8, 0xc9, 0xd1, 0x1e, 0x81, 0xd7, 0x0a, 0x96, 0xf2,
	0x0b, 0x71, 0xb8, 0x32, 0xce, 0x95, 0x2e, 0xb5, 0x65, 0xae, 0x21, 0x6e, 0x8d, 0x5b, 0xd3, 0x28,
	0xe9, 0x7b, 0xf6, 0x86, 0x90, 0x7c, 0x29, 0x86, 0x60, 0x16, 0x56, 0x15, 0x69, 0xb6, 0x54, 0xd6,
	0xea, 0x22, 0x6e, 0xf3, 0x26, 0x03, 0x4f, 0x2f, 0x3c, 0x94, 0x3f, 0x88, 0xbe, 0xd3, 0x55, 0x61,
	0x32, 0x45, 0x49, 0xc5, 0xcf, 0xc6, 0x8d, 0x69, 0xff, 0xdb, 0x17, 0xb3, 0x27, 0x45, 0xcc, 0x42,
	0x01, 0xc9, 0x4e, 0x9a, 0xec, 0xbf, 0xc7, 0xc5, 0x38, 0xad, 0x50, 0xe7, 0xa9, 0xc2, 0xb8, 0x33,
	0x6e, 0x4c, 0x5b, 0x49, 0x14, 0xc8, 0x39, 0x52, 0x31, 0x85, 0x02, 0x4c, 0xa1, 0xb6, 0x59, 0xdc,
	0xe5, 0x68, 0x8f, 0xc0, 0x75, 0x6d, 0xb3, 0xc9, 0x3f, 0x0d, 0x21, 0xff, 0xbb, 0xbf, 0xfc, 0x52,
	0x1c, 0xa1, 0x72, 0x0b, 0x8d, 0x69, 0xf8, 0x10, 0xb0, 0x49, 0x83, 0x64, 0xe8, 0x71, 0xd0, 0x82,
	0xfc, 0x4a, 0x1c, 0x67, 0x6b, 0xe7, 0xc8, 0xc8, 0xad, 0xb2, 0xc9, 0xca, 0xa3, 0xc0, 0xb7, 0xd2,
	0x17, 0x62, 0x10, 0x24, 0x8f, 0x8c, 0x3b, 0x0c, 0xd0, 0x3b, 0x77, 0x26, 0x4e, 0xf6, 0x4a, 0x4b,
	0x01, 0x9d, 0x42, 0xbd, 0xa8, 0x83, 0x7f, 0xcf, 0xf7, 0x62, 0xd7, 0x21, 0x24, 0xa7, 0xe2, 0x18,
	0x4b, 0x54, 0x45, 0x0a, 0xe6, 0x9d, 0x4e, 0x6f, 0x6a, 0xd4, 0xc0, 0x56, 0xb6, 0x93, 0x21, 0xf3,
	0x6b, 0xf3, 0x4e, 0xbf, 0x22, 0x3a, 0xf9, 0xa3, 0x29, 0xba, 0xaf, 0xd7, 0x37, 0x54, 0xb8, 0xfc,
	0x48, 0x74, 0xc9, 0x90, 0xdd, 0xf1, 0x77, 0x68, 0x79, 0x99, 0xcb, 0xcf, 0x45, 0x1f, 0xca, 0xb5,
	0xcb, 0x34, 0x67, 0x19, 0x4e, 0x5f, 0x78, 0x44, 0x39, 0x92, 0x20, 0x78, 0xc3, 0x82, 0x96, 0x17,
	0x78, 0xb4, 0x11, 0xec, 0x9a, 0x0b, 0xe2, 0x36, 0x97, 0x29, 0xb6, 0xdd, 0x05, 0xf2, 0x43, 0xd1,
	0x01, 0x54, 0xb8, 0xf6, 0x79, 0xd2, 0xa7, 0x79, 0x45, 0x07, 0x09, 0xa8, 0xdc, 0xe3, 0x83, 0x0c,
	0xe4, 0x1c, 0xa9, 0xf1, 0xb2, 0x72, 0x55, 0x15, 0x3a, 0x08, 0xfc, 0x59, 0xf6, 0xb7, 0xec, 0x1c,
	0xe5, 0x37, 0xe2, 0x03, 0x36, 0x20, 0x45, 0xa7, 0x2c, 0xcc, 0xb5, 0x73, 0x3a, 0x8f, 0x7b, 0x6c,
	0xc6, 0x31, 0x07, 0xde, 0xee, 0x38, 0x57, 0x4a, 0x16, 0xac, 0x34, 0x2e, 0xcb, 0x3c, 0x8e, 0x42,
	0xa5, 0xb5, 0xcd, 0xae, 0x98, 0x4c, 0x7e, 0x6f, 0x8a, 0xc1, 0x35, 0x77, 0xec, 0x95, 0x06, 0x50,
	0x0b, 0x4d, 0x19, 0xae, 0xfc, 0xe3, 0xde, 0xdc, 0x04, 0x12, 0xbc, 0xd3, 0x36, 0xd7, 0xee, 0xb1,
	0x77, 0x8c, 0xd8, 0x9a, 0x97, 0x62, 0xe8, 0x74, 0x66, 0x2a, 0x43, 0xe6, 0xec, 0xd9, 0x37, 0xd8,
	0x52, 0x96, 0x51, 0x47, 0xfb, 0x19, 0xa1, 0xcf, 0xb4, 0xc3, 0x78, 0x7a, 0x72, 0x99, 0x53, 0x95,
	0xda, 0x66, 0xae, 0xae, 0xc8, 0x88, 0x4a, 0xd5, 0x45, 0xa9, 0x72, 0xb6, 0xf2, 0x30, 0x39, 0xde,
	0x06, 0x7e, 0xf4, 0x9c, 0xc7, 0x35, 0xa4, 0x8c, 0x75, 0xa5, 0xd9, 0x56, 0x1a, 0x57, 0xcf, 0xde,
	0xd6, 0x95, 0x96, 0x9f, 0x8a, 0x08, 0xcd, 0x4a, 0x03, 0xaa, 0x55, 0x15, 0x5c, 0xdd, 0x01, 0x8a,
	0xf2, 0xd8, 0xe2, 0xda, 0x69, 0xf6, 0x32, 0x4a, 0x76, 0x60, 0xf2, 0x6b, 0x4b, 0x1c, 0x85, 0x01,
	0xba, 0xd2, 0xa8, 0x72, 0x85, 0xea, 0xff, 0x6e, 0x17, 0x3e, 0x47, 0x1f, 0xe6, 0x8c, 0xbc, 0x4d,
	0x9b, 0x9e, 0xe1, 0x8c, 0x4e, 0xc4, 0x33, 0x34, 0x58, 0x6c, 0xec, 0xf1, 0x0b, 0x39, 0x16, 0xfd,
	0x5c, 0x43, 0xe6, 0x4c, 0xc5, 0xf7, 0x85, 0xf7, 0x65, 0x1f, 0x49, 0x29, 0xda, 0xa8, 0x16, 0xd4,
	0x57, 0xd4, 0x73, 0xfc, 0xcc, 0x5d, 0xb5, 0x9b, 0x8c, 0x0e, 0x37, 0x43, 0x04, 0x9b, 0xa1, 0xa0,
	0xeb, 0x61, 0x65, 0x56, 0xc1, 0x9c, 0xae, 0xbf, 0xeb, 0x08, 0x70, 0x1e, 0x1f, 0x8b, 0x5e, 0xa1,
	0xec, 0x62, 0xad, 0x16, 0x9b, 0xd2, 0xb7, 0x6b, 0x9a, 0x20, 0x03, 0xa9, 0x85, 0xf9, 0x1d, 0xb7,
	0x4e, 0x2f, 0xe9, 0x18, 0x78, 0x03, 0xf3, 0xbb, 0x27, 0xf7, 0x91, 0x78, 0x7a, 0x1f, 0xc5, 0xa2,
	0xcb, 0x8b, 0xd2, 0xc5, 0x7d, 0xde, 0x72, 0xb3, 0xa4, 0x17, 0x6f, 0x8d, 0xbe, 0x4b, 0xb3, 0x72,
	0x6d, 0x31, 0x3e, 0xf4, 0x99, 0x12, 0xb9, 0x20, 0x40, 0x97, 0x92, 0xd3, 0x05, 0xef, 0x1b, 0xbc,
	0x8a, 0x07, 0x5c, 0xe7, 0x30, 0xe0, 0x70, 0x0e, 0xaf, 0x66, 0x7f, 0xde, 0x8f, 0x1a, 0xef, 0xef,
	0x47, 0x8d, 0xbf, 0xef, 0x47, 0x8d, 0x5f, 0x1e, 0x46, 0x07, 0xef, 0x1f, 0x46, 0x07, 0x7f, 0x3d,
	0x8c, 0x0e, 0x7e, 0x3a, 0x09, 0x3f, 0x93, 0x9f, 0xc3, 0xef, 0x84, 0x8a, 0x86, 0x9b, 0x0e, 0xff,
	0x3d, 0xbe, 0xfb, 0x37, 0x00, 0x00, 0xff, 0xff, 0xef, 0x47, 0xc0, 0xa8, 0x6b, 0x06, 0x00, 0x00,
}

func (m *ContentDistribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContentDistribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContentDistribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastSync != 0 {
		i = encodeVarintContentDistribution(dAtA, i, uint64(m.LastSync))
		i--
		dAtA[i] = 0x38
	}
	if m.CreatedAt != 0 {
		i = encodeVarintContentDistribution(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x30
	}
	if m.Replication != nil {
		{
			size, err := m.Replication.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContentDistribution(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SignalChannel) > 0 {
		i -= len(m.SignalChannel)
		copy(dAtA[i:], m.SignalChannel)
		i = encodeVarintContentDistribution(dAtA, i, uint64(len(m.SignalChannel)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MirrorNodes) > 0 {
		for iNdEx := len(m.MirrorNodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MirrorNodes[iNdEx])
			copy(dAtA[i:], m.MirrorNodes[iNdEx])
			i = encodeVarintContentDistribution(dAtA, i, uint64(len(m.MirrorNodes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.IpfsHash) > 0 {
		i -= len(m.IpfsHash)
		copy(dAtA[i:], m.IpfsHash)
		i = encodeVarintContentDistribution(dAtA, i, uint64(len(m.IpfsHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContentId) > 0 {
		i -= len(m.ContentId)
		copy(dAtA[i:], m.ContentId)
		i = encodeVarintContentDistribution(dAtA, i, uint64(len(m.ContentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContentReplication) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContentReplication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContentReplication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalSizeBytes != 0 {
		i = encodeVarintContentDistribution(dAtA, i, uint64(m.TotalSizeBytes))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ReplicationStrategy) > 0 {
		i -= len(m.ReplicationStrategy)
		copy(dAtA[i:], m.ReplicationStrategy)
		i = encodeVarintContentDistribution(dAtA, i, uint64(len(m.ReplicationStrategy)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ReplicaNodes) > 0 {
		for iNdEx := len(m.ReplicaNodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ReplicaNodes[iNdEx])
			copy(dAtA[i:], m.ReplicaNodes[iNdEx])
			i = encodeVarintContentDistribution(dAtA, i, uint64(len(m.ReplicaNodes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.CurrentReplicas != 0 {
		i = encodeVarintContentDistribution(dAtA, i, uint64(m.CurrentReplicas))
		i--
		dAtA[i] = 0x10
	}
	if m.TargetReplicas != 0 {
		i = encodeVarintContentDistribution(dAtA, i, uint64(m.TargetReplicas))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HubSync) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HubSync) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HubSync) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SyncMethod) > 0 {
		i -= len(m.SyncMethod)
		copy(dAtA[i:], m.SyncMethod)
		i = encodeVarintContentDistribution(dAtA, i, uint64(len(m.SyncMethod)))
		i--
		dAtA[i] = 0x4a
	}
	if m.BytesTransferred != 0 {
		i = encodeVarintContentDistribution(dAtA, i, uint64(m.BytesTransferred))
		i--
		dAtA[i] = 0x40
	}
	if m.CompletedAt != 0 {
		i = encodeVarintContentDistribution(dAtA, i, uint64(m.CompletedAt))
		i--
		dAtA[i] = 0x38
	}
	if m.StartedAt != 0 {
		i = encodeVarintContentDistribution(dAtA, i, uint64(m.StartedAt))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintContentDistribution(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ContentIds) > 0 {
		for iNdEx := len(m.ContentIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ContentIds[iNdEx])
			copy(dAtA[i:], m.ContentIds[iNdEx])
			i = encodeVarintContentDistribution(dAtA, i, uint64(len(m.ContentIds[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TargetNode) > 0 {
		i -= len(m.TargetNode)
		copy(dAtA[i:], m.TargetNode)
		i = encodeVarintContentDistribution(dAtA, i, uint64(len(m.TargetNode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SourceNode) > 0 {
		i -= len(m.SourceNode)
		copy(dAtA[i:], m.SourceNode)
		i = encodeVarintContentDistribution(dAtA, i, uint64(len(m.SourceNode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SyncId) > 0 {
		i -= len(m.SyncId)
		copy(dAtA[i:], m.SyncId)
		i = encodeVarintContentDistribution(dAtA, i, uint64(len(m.SyncId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignalMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignalMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignalMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintContentDistribution(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x42
	}
	if m.Timestamp != 0 {
		i = encodeVarintContentDistribution(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x38
	}
	if len(m.MessageType) > 0 {
		i -= len(m.MessageType)
		copy(dAtA[i:], m.MessageType)
		i = encodeVarintContentDistribution(dAtA, i, uint64(len(m.MessageType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EncryptedPayload) > 0 {
		i -= len(m.EncryptedPayload)
		copy(dAtA[i:], m.EncryptedPayload)
		i = encodeVarintContentDistribution(dAtA, i, uint64(len(m.EncryptedPayload)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintContentDistribution(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RecipientNode) > 0 {
		i -= len(m.RecipientNode)
		copy(dAtA[i:], m.RecipientNode)
		i = encodeVarintContentDistribution(dAtA, i, uint64(len(m.RecipientNode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SenderNode) > 0 {
		i -= len(m.SenderNode)
		copy(dAtA[i:], m.SenderNode)
		i = encodeVarintContentDistribution(dAtA, i, uint64(len(m.SenderNode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintContentDistribution(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContentMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContentMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContentMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RelatedContent) > 0 {
		for iNdEx := len(m.RelatedContent) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RelatedContent[iNdEx])
			copy(dAtA[i:], m.RelatedContent[iNdEx])
			i = encodeVarintContentDistribution(dAtA, i, uint64(len(m.RelatedContent[iNdEx])))
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.ViewCount != 0 {
		i = encodeVarintContentDistribution(dAtA, i, uint64(m.ViewCount))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintContentDistribution(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x5a
	}
	if m.CreatedAt != 0 {
		i = encodeVarintContentDistribution(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x50
	}
	if m.IsNsfw {
		i--
		if m.IsNsfw {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.Language) > 0 {
		i -= len(m.Language)
		copy(dAtA[i:], m.Language)
		i = encodeVarintContentDistribution(dAtA, i, uint64(len(m.Language)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.MimeType) > 0 {
		i -= len(m.MimeType)
		copy(dAtA[i:], m.MimeType)
		i = encodeVarintContentDistribution(dAtA, i, uint64(len(m.MimeType)))
		i--
		dAtA[i] = 0x3a
	}
	if m.SizeBytes != 0 {
		i = encodeVarintContentDistribution(dAtA, i, uint64(m.SizeBytes))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintContentDistribution(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintContentDistribution(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintContentDistribution(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContentType) > 0 {
		i -= len(m.ContentType)
		copy(dAtA[i:], m.ContentType)
		i = encodeVarintContentDistribution(dAtA, i, uint64(len(m.ContentType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContentId) > 0 {
		i -= len(m.ContentId)
		copy(dAtA[i:], m.ContentId)
		i = encodeVarintContentDistribution(dAtA, i, uint64(len(m.ContentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintContentDistribution(dAtA []byte, offset int, v uint64) int {
	offset -= sovContentDistribution(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ContentDistribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContentId)
	if l > 0 {
		n += 1 + l + sovContentDistribution(uint64(l))
	}
	l = len(m.IpfsHash)
	if l > 0 {
		n += 1 + l + sovContentDistribution(uint64(l))
	}
	if len(m.MirrorNodes) > 0 {
		for _, s := range m.MirrorNodes {
			l = len(s)
			n += 1 + l + sovContentDistribution(uint64(l))
		}
	}
	l = len(m.SignalChannel)
	if l > 0 {
		n += 1 + l + sovContentDistribution(uint64(l))
	}
	if m.Replication != nil {
		l = m.Replication.Size()
		n += 1 + l + sovContentDistribution(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovContentDistribution(uint64(m.CreatedAt))
	}
	if m.LastSync != 0 {
		n += 1 + sovContentDistribution(uint64(m.LastSync))
	}
	return n
}

func (m *ContentReplication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetReplicas != 0 {
		n += 1 + sovContentDistribution(uint64(m.TargetReplicas))
	}
	if m.CurrentReplicas != 0 {
		n += 1 + sovContentDistribution(uint64(m.CurrentReplicas))
	}
	if len(m.ReplicaNodes) > 0 {
		for _, s := range m.ReplicaNodes {
			l = len(s)
			n += 1 + l + sovContentDistribution(uint64(l))
		}
	}
	l = len(m.ReplicationStrategy)
	if l > 0 {
		n += 1 + l + sovContentDistribution(uint64(l))
	}
	if m.TotalSizeBytes != 0 {
		n += 1 + sovContentDistribution(uint64(m.TotalSizeBytes))
	}
	return n
}

func (m *HubSync) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SyncId)
	if l > 0 {
		n += 1 + l + sovContentDistribution(uint64(l))
	}
	l = len(m.SourceNode)
	if l > 0 {
		n += 1 + l + sovContentDistribution(uint64(l))
	}
	l = len(m.TargetNode)
	if l > 0 {
		n += 1 + l + sovContentDistribution(uint64(l))
	}
	if len(m.ContentIds) > 0 {
		for _, s := range m.ContentIds {
			l = len(s)
			n += 1 + l + sovContentDistribution(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovContentDistribution(uint64(l))
	}
	if m.StartedAt != 0 {
		n += 1 + sovContentDistribution(uint64(m.StartedAt))
	}
	if m.CompletedAt != 0 {
		n += 1 + sovContentDistribution(uint64(m.CompletedAt))
	}
	if m.BytesTransferred != 0 {
		n += 1 + sovContentDistribution(uint64(m.BytesTransferred))
	}
	l = len(m.SyncMethod)
	if l > 0 {
		n += 1 + l + sovContentDistribution(uint64(l))
	}
	return n
}

func (m *SignalMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovContentDistribution(uint64(l))
	}
	l = len(m.SenderNode)
	if l > 0 {
		n += 1 + l + sovContentDistribution(uint64(l))
	}
	l = len(m.RecipientNode)
	if l > 0 {
		n += 1 + l + sovContentDistribution(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovContentDistribution(uint64(l))
	}
	l = len(m.EncryptedPayload)
	if l > 0 {
		n += 1 + l + sovContentDistribution(uint64(l))
	}
	l = len(m.MessageType)
	if l > 0 {
		n += 1 + l + sovContentDistribution(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovContentDistribution(uint64(m.Timestamp))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovContentDistribution(uint64(l))
	}
	return n
}

func (m *ContentMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContentId)
	if l > 0 {
		n += 1 + l + sovContentDistribution(uint64(l))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovContentDistribution(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovContentDistribution(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovContentDistribution(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovContentDistribution(uint64(l))
		}
	}
	if m.SizeBytes != 0 {
		n += 1 + sovContentDistribution(uint64(m.SizeBytes))
	}
	l = len(m.MimeType)
	if l > 0 {
		n += 1 + l + sovContentDistribution(uint64(l))
	}
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovContentDistribution(uint64(l))
	}
	if m.IsNsfw {
		n += 2
	}
	if m.CreatedAt != 0 {
		n += 1 + sovContentDistribution(uint64(m.CreatedAt))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovContentDistribution(uint64(l))
	}
	if m.ViewCount != 0 {
		n += 1 + sovContentDistribution(uint64(m.ViewCount))
	}
	if len(m.RelatedContent) > 0 {
		for _, s := range m.RelatedContent {
			l = len(s)
			n += 1 + l + sovContentDistribution(uint64(l))
		}
	}
	return n
}

func sovContentDistribution(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContentDistribution(x uint64) (n int) {
	return sovContentDistribution(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ContentDistribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContentDistribution
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContentDistribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContentDistribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpfsHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpfsHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MirrorNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MirrorNodes = append(m.MirrorNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignalChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Replication == nil {
				m.Replication = &ContentReplication{}
			}
			if err := m.Replication.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSync", wireType)
			}
			m.LastSync = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSync |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContentDistribution(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContentReplication) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContentDistribution
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContentReplication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContentReplication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetReplicas", wireType)
			}
			m.TargetReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetReplicas |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentReplicas", wireType)
			}
			m.CurrentReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentReplicas |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplicaNodes = append(m.ReplicaNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationStrategy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplicationStrategy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSizeBytes", wireType)
			}
			m.TotalSizeBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSizeBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContentDistribution(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HubSync) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContentDistribution
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HubSync: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HubSync: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SyncId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceNode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceNode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetNode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetNode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentIds = append(m.ContentIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			m.StartedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedAt", wireType)
			}
			m.CompletedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompletedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesTransferred", wireType)
			}
			m.BytesTransferred = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesTransferred |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SyncMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContentDistribution(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignalMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContentDistribution
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignalMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignalMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderNode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderNode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientNode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientNode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedPayload = append(m.EncryptedPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedPayload == nil {
				m.EncryptedPayload = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContentDistribution(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContentMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContentDistribution
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContentMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContentMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeBytes", wireType)
			}
			m.SizeBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SizeBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MimeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MimeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNsfw", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNsfw = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewCount", wireType)
			}
			m.ViewCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViewCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelatedContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContentDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelatedContent = append(m.RelatedContent, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContentDistribution(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContentDistribution
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContentDistribution(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContentDistribution
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContentDistribution
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContentDistribution
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContentDistribution
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContentDistribution
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContentDistribution        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContentDistribution          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContentDistribution = fmt.Errorf("proto: unexpected end of group")
)
