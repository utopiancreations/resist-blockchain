// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: resist/usergroups/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef83767c51d9de23, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef83767c51d9de23, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryGetUserGroupRequest defines the QueryGetUserGroupRequest message.
type QueryGetUserGroupRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetUserGroupRequest) Reset()         { *m = QueryGetUserGroupRequest{} }
func (m *QueryGetUserGroupRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetUserGroupRequest) ProtoMessage()    {}
func (*QueryGetUserGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef83767c51d9de23, []int{2}
}
func (m *QueryGetUserGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUserGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUserGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUserGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUserGroupRequest.Merge(m, src)
}
func (m *QueryGetUserGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUserGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUserGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUserGroupRequest proto.InternalMessageInfo

func (m *QueryGetUserGroupRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

// QueryGetUserGroupResponse defines the QueryGetUserGroupResponse message.
type QueryGetUserGroupResponse struct {
	UserGroup UserGroup `protobuf:"bytes,1,opt,name=user_group,json=userGroup,proto3" json:"user_group"`
}

func (m *QueryGetUserGroupResponse) Reset()         { *m = QueryGetUserGroupResponse{} }
func (m *QueryGetUserGroupResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetUserGroupResponse) ProtoMessage()    {}
func (*QueryGetUserGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef83767c51d9de23, []int{3}
}
func (m *QueryGetUserGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUserGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUserGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUserGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUserGroupResponse.Merge(m, src)
}
func (m *QueryGetUserGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUserGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUserGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUserGroupResponse proto.InternalMessageInfo

func (m *QueryGetUserGroupResponse) GetUserGroup() UserGroup {
	if m != nil {
		return m.UserGroup
	}
	return UserGroup{}
}

// QueryAllUserGroupRequest defines the QueryAllUserGroupRequest message.
type QueryAllUserGroupRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUserGroupRequest) Reset()         { *m = QueryAllUserGroupRequest{} }
func (m *QueryAllUserGroupRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllUserGroupRequest) ProtoMessage()    {}
func (*QueryAllUserGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef83767c51d9de23, []int{4}
}
func (m *QueryAllUserGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUserGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUserGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUserGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUserGroupRequest.Merge(m, src)
}
func (m *QueryAllUserGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUserGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUserGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUserGroupRequest proto.InternalMessageInfo

func (m *QueryAllUserGroupRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllUserGroupResponse defines the QueryAllUserGroupResponse message.
type QueryAllUserGroupResponse struct {
	UserGroup  []UserGroup         `protobuf:"bytes,1,rep,name=user_group,json=userGroup,proto3" json:"user_group"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUserGroupResponse) Reset()         { *m = QueryAllUserGroupResponse{} }
func (m *QueryAllUserGroupResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllUserGroupResponse) ProtoMessage()    {}
func (*QueryAllUserGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef83767c51d9de23, []int{5}
}
func (m *QueryAllUserGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUserGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUserGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUserGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUserGroupResponse.Merge(m, src)
}
func (m *QueryAllUserGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUserGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUserGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUserGroupResponse proto.InternalMessageInfo

func (m *QueryAllUserGroupResponse) GetUserGroup() []UserGroup {
	if m != nil {
		return m.UserGroup
	}
	return nil
}

func (m *QueryAllUserGroupResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetContentReportRequest defines the QueryGetContentReportRequest message.
type QueryGetContentReportRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetContentReportRequest) Reset()         { *m = QueryGetContentReportRequest{} }
func (m *QueryGetContentReportRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetContentReportRequest) ProtoMessage()    {}
func (*QueryGetContentReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef83767c51d9de23, []int{6}
}
func (m *QueryGetContentReportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetContentReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetContentReportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetContentReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetContentReportRequest.Merge(m, src)
}
func (m *QueryGetContentReportRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetContentReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetContentReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetContentReportRequest proto.InternalMessageInfo

func (m *QueryGetContentReportRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

// QueryGetContentReportResponse defines the QueryGetContentReportResponse message.
type QueryGetContentReportResponse struct {
	ContentReport ContentReport `protobuf:"bytes,1,opt,name=content_report,json=contentReport,proto3" json:"content_report"`
}

func (m *QueryGetContentReportResponse) Reset()         { *m = QueryGetContentReportResponse{} }
func (m *QueryGetContentReportResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetContentReportResponse) ProtoMessage()    {}
func (*QueryGetContentReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef83767c51d9de23, []int{7}
}
func (m *QueryGetContentReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetContentReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetContentReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetContentReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetContentReportResponse.Merge(m, src)
}
func (m *QueryGetContentReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetContentReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetContentReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetContentReportResponse proto.InternalMessageInfo

func (m *QueryGetContentReportResponse) GetContentReport() ContentReport {
	if m != nil {
		return m.ContentReport
	}
	return ContentReport{}
}

// QueryAllContentReportRequest defines the QueryAllContentReportRequest message.
type QueryAllContentReportRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllContentReportRequest) Reset()         { *m = QueryAllContentReportRequest{} }
func (m *QueryAllContentReportRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllContentReportRequest) ProtoMessage()    {}
func (*QueryAllContentReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef83767c51d9de23, []int{8}
}
func (m *QueryAllContentReportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllContentReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllContentReportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllContentReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllContentReportRequest.Merge(m, src)
}
func (m *QueryAllContentReportRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllContentReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllContentReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllContentReportRequest proto.InternalMessageInfo

func (m *QueryAllContentReportRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllContentReportResponse defines the QueryAllContentReportResponse message.
type QueryAllContentReportResponse struct {
	ContentReport []ContentReport     `protobuf:"bytes,1,rep,name=content_report,json=contentReport,proto3" json:"content_report"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllContentReportResponse) Reset()         { *m = QueryAllContentReportResponse{} }
func (m *QueryAllContentReportResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllContentReportResponse) ProtoMessage()    {}
func (*QueryAllContentReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef83767c51d9de23, []int{9}
}
func (m *QueryAllContentReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllContentReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllContentReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllContentReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllContentReportResponse.Merge(m, src)
}
func (m *QueryAllContentReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllContentReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllContentReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllContentReportResponse proto.InternalMessageInfo

func (m *QueryAllContentReportResponse) GetContentReport() []ContentReport {
	if m != nil {
		return m.ContentReport
	}
	return nil
}

func (m *QueryAllContentReportResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetGovernanceProposalRequest defines the QueryGetGovernanceProposalRequest message.
type QueryGetGovernanceProposalRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetGovernanceProposalRequest) Reset()         { *m = QueryGetGovernanceProposalRequest{} }
func (m *QueryGetGovernanceProposalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetGovernanceProposalRequest) ProtoMessage()    {}
func (*QueryGetGovernanceProposalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef83767c51d9de23, []int{10}
}
func (m *QueryGetGovernanceProposalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGovernanceProposalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGovernanceProposalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGovernanceProposalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGovernanceProposalRequest.Merge(m, src)
}
func (m *QueryGetGovernanceProposalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGovernanceProposalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGovernanceProposalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGovernanceProposalRequest proto.InternalMessageInfo

func (m *QueryGetGovernanceProposalRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

// QueryGetGovernanceProposalResponse defines the QueryGetGovernanceProposalResponse message.
type QueryGetGovernanceProposalResponse struct {
	GovernanceProposal GovernanceProposal `protobuf:"bytes,1,opt,name=governance_proposal,json=governanceProposal,proto3" json:"governance_proposal"`
}

func (m *QueryGetGovernanceProposalResponse) Reset()         { *m = QueryGetGovernanceProposalResponse{} }
func (m *QueryGetGovernanceProposalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetGovernanceProposalResponse) ProtoMessage()    {}
func (*QueryGetGovernanceProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef83767c51d9de23, []int{11}
}
func (m *QueryGetGovernanceProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGovernanceProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGovernanceProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGovernanceProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGovernanceProposalResponse.Merge(m, src)
}
func (m *QueryGetGovernanceProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGovernanceProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGovernanceProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGovernanceProposalResponse proto.InternalMessageInfo

func (m *QueryGetGovernanceProposalResponse) GetGovernanceProposal() GovernanceProposal {
	if m != nil {
		return m.GovernanceProposal
	}
	return GovernanceProposal{}
}

// QueryAllGovernanceProposalRequest defines the QueryAllGovernanceProposalRequest message.
type QueryAllGovernanceProposalRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGovernanceProposalRequest) Reset()         { *m = QueryAllGovernanceProposalRequest{} }
func (m *QueryAllGovernanceProposalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllGovernanceProposalRequest) ProtoMessage()    {}
func (*QueryAllGovernanceProposalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef83767c51d9de23, []int{12}
}
func (m *QueryAllGovernanceProposalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGovernanceProposalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGovernanceProposalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGovernanceProposalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGovernanceProposalRequest.Merge(m, src)
}
func (m *QueryAllGovernanceProposalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGovernanceProposalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGovernanceProposalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGovernanceProposalRequest proto.InternalMessageInfo

func (m *QueryAllGovernanceProposalRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllGovernanceProposalResponse defines the QueryAllGovernanceProposalResponse message.
type QueryAllGovernanceProposalResponse struct {
	GovernanceProposal []GovernanceProposal `protobuf:"bytes,1,rep,name=governance_proposal,json=governanceProposal,proto3" json:"governance_proposal"`
	Pagination         *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGovernanceProposalResponse) Reset()         { *m = QueryAllGovernanceProposalResponse{} }
func (m *QueryAllGovernanceProposalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllGovernanceProposalResponse) ProtoMessage()    {}
func (*QueryAllGovernanceProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef83767c51d9de23, []int{13}
}
func (m *QueryAllGovernanceProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGovernanceProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGovernanceProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGovernanceProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGovernanceProposalResponse.Merge(m, src)
}
func (m *QueryAllGovernanceProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGovernanceProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGovernanceProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGovernanceProposalResponse proto.InternalMessageInfo

func (m *QueryAllGovernanceProposalResponse) GetGovernanceProposal() []GovernanceProposal {
	if m != nil {
		return m.GovernanceProposal
	}
	return nil
}

func (m *QueryAllGovernanceProposalResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "resist.usergroups.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "resist.usergroups.v1.QueryParamsResponse")
	proto.RegisterType((*QueryGetUserGroupRequest)(nil), "resist.usergroups.v1.QueryGetUserGroupRequest")
	proto.RegisterType((*QueryGetUserGroupResponse)(nil), "resist.usergroups.v1.QueryGetUserGroupResponse")
	proto.RegisterType((*QueryAllUserGroupRequest)(nil), "resist.usergroups.v1.QueryAllUserGroupRequest")
	proto.RegisterType((*QueryAllUserGroupResponse)(nil), "resist.usergroups.v1.QueryAllUserGroupResponse")
	proto.RegisterType((*QueryGetContentReportRequest)(nil), "resist.usergroups.v1.QueryGetContentReportRequest")
	proto.RegisterType((*QueryGetContentReportResponse)(nil), "resist.usergroups.v1.QueryGetContentReportResponse")
	proto.RegisterType((*QueryAllContentReportRequest)(nil), "resist.usergroups.v1.QueryAllContentReportRequest")
	proto.RegisterType((*QueryAllContentReportResponse)(nil), "resist.usergroups.v1.QueryAllContentReportResponse")
	proto.RegisterType((*QueryGetGovernanceProposalRequest)(nil), "resist.usergroups.v1.QueryGetGovernanceProposalRequest")
	proto.RegisterType((*QueryGetGovernanceProposalResponse)(nil), "resist.usergroups.v1.QueryGetGovernanceProposalResponse")
	proto.RegisterType((*QueryAllGovernanceProposalRequest)(nil), "resist.usergroups.v1.QueryAllGovernanceProposalRequest")
	proto.RegisterType((*QueryAllGovernanceProposalResponse)(nil), "resist.usergroups.v1.QueryAllGovernanceProposalResponse")
}

func init() { proto.RegisterFile("resist/usergroups/v1/query.proto", fileDescriptor_ef83767c51d9de23) }

var fileDescriptor_ef83767c51d9de23 = []byte{
	// 795 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xb1, 0x6f, 0xd3, 0x4e,
	0x14, 0xc7, 0x73, 0xed, 0xaf, 0x95, 0x72, 0x3f, 0x8a, 0xe8, 0x35, 0xa0, 0x36, 0x0a, 0x69, 0x6b,
	0x4a, 0x49, 0x4b, 0xe5, 0x6b, 0x9a, 0x4a, 0xd0, 0x09, 0xb5, 0x20, 0xb2, 0x30, 0x84, 0x48, 0x30,
	0xb0, 0x44, 0x4e, 0x38, 0x2c, 0x0b, 0xd7, 0xe7, 0xfa, 0x9c, 0xa8, 0x15, 0x62, 0x01, 0xb1, 0x23,
	0xb1, 0xb1, 0xb1, 0xa1, 0x4e, 0xb0, 0x21, 0x06, 0x36, 0xa4, 0x4e, 0xa8, 0x12, 0x0b, 0x13, 0x42,
	0x2d, 0x12, 0xff, 0x06, 0xf2, 0xf9, 0x25, 0x4d, 0xc8, 0xd9, 0x71, 0x21, 0x4b, 0x14, 0x9f, 0xdf,
	0xbb, 0xf7, 0xf9, 0xbe, 0x7b, 0xfa, 0x9e, 0xf1, 0x9c, 0xc7, 0x84, 0x25, 0x7c, 0xda, 0x14, 0xcc,
	0x33, 0x3d, 0xde, 0x74, 0x05, 0x6d, 0x15, 0xe9, 0x4e, 0x93, 0x79, 0x7b, 0xba, 0xeb, 0x71, 0x9f,
	0x93, 0x4c, 0x18, 0xa1, 0x9f, 0x44, 0xe8, 0xad, 0x62, 0x76, 0xd2, 0xd8, 0xb6, 0x1c, 0x4e, 0xe5,
	0x6f, 0x18, 0x98, 0x5d, 0x6e, 0x70, 0xb1, 0xcd, 0x05, 0xad, 0x1b, 0x82, 0x85, 0x3b, 0xd0, 0x56,
	0xb1, 0xce, 0x7c, 0xa3, 0x48, 0x5d, 0xc3, 0xb4, 0x1c, 0xc3, 0xb7, 0xb8, 0x03, 0xb1, 0x19, 0x93,
	0x9b, 0x5c, 0xfe, 0xa5, 0xc1, 0x3f, 0x58, 0xcd, 0x99, 0x9c, 0x9b, 0x36, 0xa3, 0x86, 0x6b, 0x51,
	0xc3, 0x71, 0xb8, 0x2f, 0x53, 0x04, 0xbc, 0x5d, 0x52, 0xa2, 0x36, 0xb8, 0xe3, 0x33, 0xc7, 0xaf,
	0x79, 0xcc, 0xe5, 0x9e, 0x0f, 0xa1, 0xba, 0x32, 0xd4, 0xe4, 0x2d, 0xe6, 0x39, 0x86, 0xd3, 0x60,
	0x35, 0xd7, 0xe3, 0x2e, 0x17, 0x86, 0x0d, 0xf1, 0xf3, 0xca, 0x78, 0xd7, 0xf0, 0x8c, 0xed, 0x76,
	0xf5, 0xcb, 0xca, 0x90, 0xe0, 0xa9, 0x26, 0x1f, 0xc3, 0x30, 0x2d, 0x83, 0xc9, 0xdd, 0x40, 0x7a,
	0x45, 0xe6, 0x56, 0xd9, 0x4e, 0x93, 0x09, 0x5f, 0xbb, 0x8f, 0xa7, 0x7a, 0x56, 0x85, 0xcb, 0x1d,
	0xc1, 0xc8, 0x0d, 0x3c, 0x1e, 0xd6, 0x98, 0x46, 0x73, 0xa8, 0xf0, 0xff, 0x5a, 0x4e, 0x57, 0xf5,
	0x5a, 0x0f, 0xb3, 0xb6, 0xd2, 0x07, 0xdf, 0x67, 0x53, 0x6f, 0x7f, 0xbd, 0x5b, 0x46, 0x55, 0x48,
	0xd3, 0x56, 0xf1, 0xb4, 0xdc, 0xb7, 0xcc, 0xfc, 0x7b, 0x82, 0x79, 0xe5, 0x20, 0x05, 0x6a, 0x92,
	0x0c, 0x1e, 0xb3, 0x9c, 0x87, 0x6c, 0x57, 0xee, 0x9d, 0xae, 0x86, 0x0f, 0x9a, 0x81, 0x67, 0x14,
	0x19, 0xc0, 0x73, 0x0b, 0xe3, 0x13, 0x41, 0xc0, 0x34, 0xab, 0x66, 0xea, 0x24, 0x6f, 0xfd, 0x17,
	0x60, 0x55, 0xd3, 0xcd, 0xf6, 0x82, 0x56, 0x07, 0xa8, 0x4d, 0xdb, 0xee, 0x83, 0xba, 0x8d, 0xf1,
	0xc9, 0x2c, 0x40, 0x85, 0x45, 0x3d, 0x1c, 0x1c, 0x3d, 0x18, 0x1c, 0x3d, 0x1c, 0x3d, 0x18, 0x1c,
	0xbd, 0x62, 0x98, 0x0c, 0x72, 0xab, 0x5d, 0x99, 0xda, 0x3e, 0x02, 0x1d, 0xbd, 0x45, 0x22, 0x74,
	0x8c, 0xfe, 0x8d, 0x0e, 0x52, 0xee, 0x61, 0x1d, 0x91, 0xac, 0x57, 0x06, 0xb2, 0x86, 0x08, 0x3d,
	0xb0, 0xeb, 0x38, 0xd7, 0xee, 0xf9, 0xcd, 0x70, 0x5a, 0xab, 0x72, 0x58, 0xe3, 0x4f, 0x6a, 0x07,
	0x5f, 0x8c, 0xc8, 0x02, 0x95, 0x15, 0x7c, 0xb6, 0x77, 0xf8, 0xa1, 0x9f, 0x97, 0xd4, 0x4a, 0x7b,
	0x36, 0x01, 0xb5, 0x13, 0x8d, 0xee, 0x45, 0xed, 0x11, 0x80, 0x6e, 0xda, 0xb6, 0x12, 0x74, 0x58,
	0xa7, 0xf7, 0x11, 0x81, 0xb6, 0xfe, 0x42, 0x31, 0xda, 0x46, 0xff, 0x45, 0xdb, 0xf0, 0x4e, 0x73,
	0x03, 0xcf, 0xb7, 0xcf, 0xa5, 0xdc, 0x31, 0x94, 0x0a, 0xf8, 0x49, 0xfc, 0x91, 0xbe, 0x40, 0x58,
	0x8b, 0xcb, 0x05, 0xf1, 0x35, 0x3c, 0xa5, 0xb0, 0x2a, 0xe8, 0x77, 0x41, 0xdd, 0x81, 0xfe, 0xed,
	0xa0, 0x0d, 0xc4, 0xec, 0x7b, 0xa3, 0x3d, 0x06, 0x09, 0x9b, 0xb6, 0x1d, 0x2d, 0x61, 0x58, 0x87,
	0xfd, 0xa5, 0x2d, 0x3a, 0xa2, 0xda, 0x20, 0xd1, 0xa3, 0xc3, 0x11, 0x3d, 0xb4, 0x01, 0x58, 0xfb,
	0x90, 0xc6, 0x63, 0x52, 0x10, 0x79, 0x8e, 0xf0, 0x78, 0x68, 0xce, 0x24, 0x82, 0xb0, 0xff, 0x2e,
	0xc8, 0x2e, 0x25, 0x88, 0x0c, 0xab, 0x6a, 0x0b, 0xcf, 0xbe, 0xfe, 0x7c, 0x35, 0x92, 0x27, 0x39,
	0x1a, 0x73, 0x3f, 0x91, 0x37, 0x08, 0x9f, 0xe9, 0xb6, 0x73, 0xa2, 0xc7, 0x54, 0x50, 0xdc, 0x14,
	0x59, 0x9a, 0x38, 0x1e, 0xb8, 0x56, 0x25, 0xd7, 0x32, 0x29, 0xd0, 0x01, 0x97, 0x22, 0x7d, 0x22,
	0x07, 0xff, 0x29, 0x79, 0x8d, 0xf0, 0xc4, 0x1d, 0x4b, 0x24, 0x84, 0x54, 0xdc, 0x1c, 0xb1, 0x90,
	0xaa, 0x4b, 0x40, 0x2b, 0x48, 0x48, 0x8d, 0xcc, 0x0d, 0x82, 0x24, 0xef, 0x11, 0x3e, 0xf7, 0xa7,
	0xcb, 0x92, 0xb5, 0xf8, 0xa6, 0xa8, 0xfc, 0x31, 0x5b, 0x3a, 0x55, 0x0e, 0x70, 0xae, 0x4b, 0x4e,
	0x9d, 0xac, 0xd0, 0x04, 0xdf, 0x37, 0x9d, 0x86, 0xee, 0x23, 0x3c, 0x19, 0x34, 0x34, 0x39, 0x74,
	0x84, 0xa9, 0xc7, 0x42, 0x47, 0xf9, 0xb3, 0xb6, 0x22, 0xa1, 0x17, 0xc9, 0x42, 0x12, 0x68, 0xf2,
	0x19, 0xe1, 0xf3, 0x4a, 0xcb, 0x23, 0xd7, 0xe2, 0x3b, 0x16, 0xe9, 0x4e, 0xd9, 0xeb, 0xa7, 0x4f,
	0x04, 0xf4, 0x0d, 0x89, 0x5e, 0x22, 0x45, 0x9a, 0xf4, 0x23, 0xb1, 0xd3, 0xf4, 0x4f, 0x08, 0x5f,
	0x08, 0x9a, 0x7e, 0x4a, 0x21, 0x71, 0x36, 0x1b, 0x2b, 0x24, 0xd6, 0x31, 0xb5, 0xa2, 0x14, 0x72,
	0x95, 0x2c, 0x25, 0x16, 0xb2, 0x55, 0x3a, 0x38, 0xca, 0xa3, 0xc3, 0xa3, 0x3c, 0xfa, 0x71, 0x94,
	0x47, 0x2f, 0x8f, 0xf3, 0xa9, 0xc3, 0xe3, 0x7c, 0xea, 0xdb, 0x71, 0x3e, 0xf5, 0x60, 0x06, 0xf6,
	0xd8, 0xed, 0xde, 0xc5, 0xdf, 0x73, 0x99, 0xa8, 0x8f, 0xcb, 0x2f, 0xdb, 0xd2, 0xef, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x7c, 0xe3, 0xb9, 0xab, 0x2b, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// ListUserGroup Queries a list of UserGroup items.
	GetUserGroup(ctx context.Context, in *QueryGetUserGroupRequest, opts ...grpc.CallOption) (*QueryGetUserGroupResponse, error)
	// ListUserGroup defines the ListUserGroup RPC.
	ListUserGroup(ctx context.Context, in *QueryAllUserGroupRequest, opts ...grpc.CallOption) (*QueryAllUserGroupResponse, error)
	// ListContentReport Queries a list of ContentReport items.
	GetContentReport(ctx context.Context, in *QueryGetContentReportRequest, opts ...grpc.CallOption) (*QueryGetContentReportResponse, error)
	// ListContentReport defines the ListContentReport RPC.
	ListContentReport(ctx context.Context, in *QueryAllContentReportRequest, opts ...grpc.CallOption) (*QueryAllContentReportResponse, error)
	// ListGovernanceProposal Queries a list of GovernanceProposal items.
	GetGovernanceProposal(ctx context.Context, in *QueryGetGovernanceProposalRequest, opts ...grpc.CallOption) (*QueryGetGovernanceProposalResponse, error)
	// ListGovernanceProposal defines the ListGovernanceProposal RPC.
	ListGovernanceProposal(ctx context.Context, in *QueryAllGovernanceProposalRequest, opts ...grpc.CallOption) (*QueryAllGovernanceProposalResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/resist.usergroups.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetUserGroup(ctx context.Context, in *QueryGetUserGroupRequest, opts ...grpc.CallOption) (*QueryGetUserGroupResponse, error) {
	out := new(QueryGetUserGroupResponse)
	err := c.cc.Invoke(ctx, "/resist.usergroups.v1.Query/GetUserGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListUserGroup(ctx context.Context, in *QueryAllUserGroupRequest, opts ...grpc.CallOption) (*QueryAllUserGroupResponse, error) {
	out := new(QueryAllUserGroupResponse)
	err := c.cc.Invoke(ctx, "/resist.usergroups.v1.Query/ListUserGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetContentReport(ctx context.Context, in *QueryGetContentReportRequest, opts ...grpc.CallOption) (*QueryGetContentReportResponse, error) {
	out := new(QueryGetContentReportResponse)
	err := c.cc.Invoke(ctx, "/resist.usergroups.v1.Query/GetContentReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListContentReport(ctx context.Context, in *QueryAllContentReportRequest, opts ...grpc.CallOption) (*QueryAllContentReportResponse, error) {
	out := new(QueryAllContentReportResponse)
	err := c.cc.Invoke(ctx, "/resist.usergroups.v1.Query/ListContentReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetGovernanceProposal(ctx context.Context, in *QueryGetGovernanceProposalRequest, opts ...grpc.CallOption) (*QueryGetGovernanceProposalResponse, error) {
	out := new(QueryGetGovernanceProposalResponse)
	err := c.cc.Invoke(ctx, "/resist.usergroups.v1.Query/GetGovernanceProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListGovernanceProposal(ctx context.Context, in *QueryAllGovernanceProposalRequest, opts ...grpc.CallOption) (*QueryAllGovernanceProposalResponse, error) {
	out := new(QueryAllGovernanceProposalResponse)
	err := c.cc.Invoke(ctx, "/resist.usergroups.v1.Query/ListGovernanceProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// ListUserGroup Queries a list of UserGroup items.
	GetUserGroup(context.Context, *QueryGetUserGroupRequest) (*QueryGetUserGroupResponse, error)
	// ListUserGroup defines the ListUserGroup RPC.
	ListUserGroup(context.Context, *QueryAllUserGroupRequest) (*QueryAllUserGroupResponse, error)
	// ListContentReport Queries a list of ContentReport items.
	GetContentReport(context.Context, *QueryGetContentReportRequest) (*QueryGetContentReportResponse, error)
	// ListContentReport defines the ListContentReport RPC.
	ListContentReport(context.Context, *QueryAllContentReportRequest) (*QueryAllContentReportResponse, error)
	// ListGovernanceProposal Queries a list of GovernanceProposal items.
	GetGovernanceProposal(context.Context, *QueryGetGovernanceProposalRequest) (*QueryGetGovernanceProposalResponse, error)
	// ListGovernanceProposal defines the ListGovernanceProposal RPC.
	ListGovernanceProposal(context.Context, *QueryAllGovernanceProposalRequest) (*QueryAllGovernanceProposalResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetUserGroup(ctx context.Context, req *QueryGetUserGroupRequest) (*QueryGetUserGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGroup not implemented")
}
func (*UnimplementedQueryServer) ListUserGroup(ctx context.Context, req *QueryAllUserGroupRequest) (*QueryAllUserGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserGroup not implemented")
}
func (*UnimplementedQueryServer) GetContentReport(ctx context.Context, req *QueryGetContentReportRequest) (*QueryGetContentReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContentReport not implemented")
}
func (*UnimplementedQueryServer) ListContentReport(ctx context.Context, req *QueryAllContentReportRequest) (*QueryAllContentReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContentReport not implemented")
}
func (*UnimplementedQueryServer) GetGovernanceProposal(ctx context.Context, req *QueryGetGovernanceProposalRequest) (*QueryGetGovernanceProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGovernanceProposal not implemented")
}
func (*UnimplementedQueryServer) ListGovernanceProposal(ctx context.Context, req *QueryAllGovernanceProposalRequest) (*QueryAllGovernanceProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGovernanceProposal not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resist.usergroups.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resist.usergroups.v1.Query/GetUserGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetUserGroup(ctx, req.(*QueryGetUserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllUserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resist.usergroups.v1.Query/ListUserGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListUserGroup(ctx, req.(*QueryAllUserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetContentReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetContentReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetContentReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resist.usergroups.v1.Query/GetContentReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetContentReport(ctx, req.(*QueryGetContentReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListContentReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllContentReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListContentReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resist.usergroups.v1.Query/ListContentReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListContentReport(ctx, req.(*QueryAllContentReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetGovernanceProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGovernanceProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetGovernanceProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resist.usergroups.v1.Query/GetGovernanceProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetGovernanceProposal(ctx, req.(*QueryGetGovernanceProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListGovernanceProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGovernanceProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListGovernanceProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resist.usergroups.v1.Query/ListGovernanceProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListGovernanceProposal(ctx, req.(*QueryAllGovernanceProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "resist.usergroups.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetUserGroup",
			Handler:    _Query_GetUserGroup_Handler,
		},
		{
			MethodName: "ListUserGroup",
			Handler:    _Query_ListUserGroup_Handler,
		},
		{
			MethodName: "GetContentReport",
			Handler:    _Query_GetContentReport_Handler,
		},
		{
			MethodName: "ListContentReport",
			Handler:    _Query_ListContentReport_Handler,
		},
		{
			MethodName: "GetGovernanceProposal",
			Handler:    _Query_GetGovernanceProposal_Handler,
		},
		{
			MethodName: "ListGovernanceProposal",
			Handler:    _Query_ListGovernanceProposal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resist/usergroups/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetUserGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUserGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUserGroupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUserGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUserGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUserGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UserGroup.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllUserGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUserGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUserGroupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllUserGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUserGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUserGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserGroup) > 0 {
		for iNdEx := len(m.UserGroup) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserGroup[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetContentReportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetContentReportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetContentReportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetContentReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetContentReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetContentReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ContentReport.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllContentReportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllContentReportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllContentReportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllContentReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllContentReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllContentReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContentReport) > 0 {
		for iNdEx := len(m.ContentReport) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContentReport[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGovernanceProposalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGovernanceProposalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGovernanceProposalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGovernanceProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGovernanceProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGovernanceProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GovernanceProposal.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllGovernanceProposalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGovernanceProposalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGovernanceProposalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGovernanceProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGovernanceProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGovernanceProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.GovernanceProposal) > 0 {
		for iNdEx := len(m.GovernanceProposal) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GovernanceProposal[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetUserGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUserGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UserGroup.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllUserGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllUserGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserGroup) > 0 {
		for _, e := range m.UserGroup {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetContentReportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetContentReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ContentReport.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllContentReportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllContentReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ContentReport) > 0 {
		for _, e := range m.ContentReport {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGovernanceProposalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGovernanceProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GovernanceProposal.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllGovernanceProposalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGovernanceProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GovernanceProposal) > 0 {
		for _, e := range m.GovernanceProposal {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUserGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUserGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUserGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUserGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUserGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUserGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserGroup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUserGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUserGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUserGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUserGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUserGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUserGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserGroup = append(m.UserGroup, UserGroup{})
			if err := m.UserGroup[len(m.UserGroup)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetContentReportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetContentReportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetContentReportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetContentReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetContentReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetContentReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentReport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ContentReport.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllContentReportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllContentReportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllContentReportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllContentReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllContentReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllContentReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentReport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentReport = append(m.ContentReport, ContentReport{})
			if err := m.ContentReport[len(m.ContentReport)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGovernanceProposalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGovernanceProposalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGovernanceProposalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGovernanceProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGovernanceProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGovernanceProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovernanceProposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GovernanceProposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGovernanceProposalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGovernanceProposalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGovernanceProposalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGovernanceProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGovernanceProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGovernanceProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GovernanceProposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GovernanceProposal = append(m.GovernanceProposal, GovernanceProposal{})
			if err := m.GovernanceProposal[len(m.GovernanceProposal)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
