// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: resist/usergroups/v1/user_group.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// UserGroup defines the UserGroup message.
type UserGroup struct {
	Index         string   `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Name          string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Admin         string   `protobuf:"bytes,4,opt,name=admin,proto3" json:"admin,omitempty"`
	Members       []string `protobuf:"bytes,5,rep,name=members,proto3" json:"members,omitempty"`
	VoteThreshold uint64   `protobuf:"varint,6,opt,name=vote_threshold,json=voteThreshold,proto3" json:"vote_threshold,omitempty"`
	CreatedAt     uint64   `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Creator       string   `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *UserGroup) Reset()         { *m = UserGroup{} }
func (m *UserGroup) String() string { return proto.CompactTextString(m) }
func (*UserGroup) ProtoMessage()    {}
func (*UserGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_93fe212ec920a36c, []int{0}
}
func (m *UserGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGroup.Merge(m, src)
}
func (m *UserGroup) XXX_Size() int {
	return m.Size()
}
func (m *UserGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGroup.DiscardUnknown(m)
}

var xxx_messageInfo_UserGroup proto.InternalMessageInfo

func (m *UserGroup) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *UserGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserGroup) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UserGroup) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *UserGroup) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *UserGroup) GetVoteThreshold() uint64 {
	if m != nil {
		return m.VoteThreshold
	}
	return 0
}

func (m *UserGroup) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *UserGroup) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*UserGroup)(nil), "resist.usergroups.v1.UserGroup")
}

func init() {
	proto.RegisterFile("resist/usergroups/v1/user_group.proto", fileDescriptor_93fe212ec920a36c)
}

var fileDescriptor_93fe212ec920a36c = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x14, 0x45, 0x6b, 0x9a, 0xb6, 0xc4, 0x08, 0x06, 0xab, 0x83, 0x19, 0xb0, 0x22, 0xa4, 0x4a, 0x99,
	0x52, 0x55, 0xfd, 0x02, 0x58, 0xd8, 0x23, 0x58, 0x58, 0xa2, 0xb4, 0x7e, 0xa2, 0x96, 0x48, 0x1c,
	0x3d, 0xbb, 0x51, 0xf9, 0x0b, 0x3e, 0x8b, 0xb1, 0x23, 0x23, 0x4a, 0x06, 0x7e, 0x03, 0xe5, 0xa5,
	0x11, 0xdd, 0x7c, 0x8e, 0xaf, 0xee, 0x93, 0x2e, 0x5f, 0x20, 0x38, 0xe3, 0xfc, 0x72, 0xef, 0x00,
	0xdf, 0xd0, 0xee, 0x2b, 0xb7, 0xac, 0x57, 0x44, 0x19, 0x61, 0x52, 0xa1, 0xf5, 0x56, 0xcc, 0xfb,
	0x58, 0xf2, 0x1f, 0x4b, 0xea, 0xd5, 0xfd, 0x2f, 0xe3, 0xe1, 0x8b, 0x03, 0x7c, 0xea, 0x8c, 0x98,
	0xf3, 0x89, 0x29, 0x35, 0x1c, 0x24, 0x8b, 0x58, 0x1c, 0xa6, 0x3d, 0x08, 0xc1, 0x83, 0x32, 0x2f,
	0x40, 0x5e, 0x90, 0xa4, 0xb7, 0x88, 0xf8, 0x95, 0x06, 0xb7, 0x45, 0x53, 0x79, 0x63, 0x4b, 0x39,
	0xa6, 0xaf, 0x73, 0xd5, 0x75, 0xe5, 0xba, 0x30, 0xa5, 0x0c, 0xfa, 0x2e, 0x02, 0x21, 0xf9, 0xac,
	0x80, 0x62, 0x03, 0xe8, 0xe4, 0x24, 0x1a, 0xc7, 0x61, 0x3a, 0xa0, 0x58, 0xf0, 0x9b, 0xda, 0x7a,
	0xc8, 0xfc, 0x0e, 0xc1, 0xed, 0xec, 0xbb, 0x96, 0xd3, 0x88, 0xc5, 0x41, 0x7a, 0xdd, 0xd9, 0xe7,
	0x41, 0x8a, 0x3b, 0xce, 0xb7, 0x08, 0xb9, 0x07, 0x9d, 0xe5, 0x5e, 0xce, 0x28, 0x12, 0x9e, 0xcc,
	0x83, 0xef, 0xfa, 0x09, 0x2c, 0xca, 0x4b, 0xba, 0x3b, 0xe0, 0xe3, 0xfa, 0xab, 0x51, 0xec, 0xd8,
	0x28, 0xf6, 0xd3, 0x28, 0xf6, 0xd9, 0xaa, 0xd1, 0xb1, 0x55, 0xa3, 0xef, 0x56, 0x8d, 0x5e, 0x6f,
	0x4f, 0x03, 0x1e, 0xce, 0x27, 0xf4, 0x1f, 0x15, 0xb8, 0xcd, 0x94, 0xb6, 0x5b, 0xff, 0x05, 0x00,
	0x00, 0xff, 0xff, 0x74, 0x05, 0x43, 0x5f, 0x64, 0x01, 0x00, 0x00,
}

func (m *UserGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintUserGroup(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x42
	}
	if m.CreatedAt != 0 {
		i = encodeVarintUserGroup(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x38
	}
	if m.VoteThreshold != 0 {
		i = encodeVarintUserGroup(dAtA, i, uint64(m.VoteThreshold))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Members[iNdEx])
			copy(dAtA[i:], m.Members[iNdEx])
			i = encodeVarintUserGroup(dAtA, i, uint64(len(m.Members[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintUserGroup(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintUserGroup(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUserGroup(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintUserGroup(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintUserGroup(dAtA []byte, offset int, v uint64) int {
	offset -= sovUserGroup(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovUserGroup(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUserGroup(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovUserGroup(uint64(l))
	}
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovUserGroup(uint64(l))
	}
	if len(m.Members) > 0 {
		for _, s := range m.Members {
			l = len(s)
			n += 1 + l + sovUserGroup(uint64(l))
		}
	}
	if m.VoteThreshold != 0 {
		n += 1 + sovUserGroup(uint64(m.VoteThreshold))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovUserGroup(uint64(m.CreatedAt))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovUserGroup(uint64(l))
	}
	return n
}

func sovUserGroup(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUserGroup(x uint64) (n int) {
	return sovUserGroup(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteThreshold", wireType)
			}
			m.VoteThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteThreshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUserGroup(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUserGroup
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUserGroup
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUserGroup
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUserGroup
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUserGroup        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUserGroup          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUserGroup = fmt.Errorf("proto: unexpected end of group")
)
