// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: resist/rewards/v1/resource_allocation.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ResourceAllocation tracks resource usage by content/services
type ResourceAllocation struct {
	AllocationId       string        `protobuf:"bytes,1,opt,name=allocation_id,json=allocationId,proto3" json:"allocation_id,omitempty"`
	ContentId          string        `protobuf:"bytes,2,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	NodeId             string        `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Requester          string        `protobuf:"bytes,4,opt,name=requester,proto3" json:"requester,omitempty"`
	RequestedResources *ResourceSpec `protobuf:"bytes,5,opt,name=requested_resources,json=requestedResources,proto3" json:"requested_resources,omitempty"`
	AllocatedResources *ResourceSpec `protobuf:"bytes,6,opt,name=allocated_resources,json=allocatedResources,proto3" json:"allocated_resources,omitempty"`
	StartTime          int64         `protobuf:"varint,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime            int64         `protobuf:"varint,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Status             string        `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	CostPerHour        uint64        `protobuf:"varint,10,opt,name=cost_per_hour,json=costPerHour,proto3" json:"cost_per_hour,omitempty"`
	TotalCost          uint64        `protobuf:"varint,11,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
}

func (m *ResourceAllocation) Reset()         { *m = ResourceAllocation{} }
func (m *ResourceAllocation) String() string { return proto.CompactTextString(m) }
func (*ResourceAllocation) ProtoMessage()    {}
func (*ResourceAllocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_003b72126aa2db70, []int{0}
}
func (m *ResourceAllocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceAllocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceAllocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceAllocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceAllocation.Merge(m, src)
}
func (m *ResourceAllocation) XXX_Size() int {
	return m.Size()
}
func (m *ResourceAllocation) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceAllocation.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceAllocation proto.InternalMessageInfo

func (m *ResourceAllocation) GetAllocationId() string {
	if m != nil {
		return m.AllocationId
	}
	return ""
}

func (m *ResourceAllocation) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *ResourceAllocation) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ResourceAllocation) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

func (m *ResourceAllocation) GetRequestedResources() *ResourceSpec {
	if m != nil {
		return m.RequestedResources
	}
	return nil
}

func (m *ResourceAllocation) GetAllocatedResources() *ResourceSpec {
	if m != nil {
		return m.AllocatedResources
	}
	return nil
}

func (m *ResourceAllocation) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *ResourceAllocation) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *ResourceAllocation) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ResourceAllocation) GetCostPerHour() uint64 {
	if m != nil {
		return m.CostPerHour
	}
	return 0
}

func (m *ResourceAllocation) GetTotalCost() uint64 {
	if m != nil {
		return m.TotalCost
	}
	return 0
}

// ResourceMarketplace for resource pricing and discovery
type ResourceOffer struct {
	OfferId            string        `protobuf:"bytes,1,opt,name=offer_id,json=offerId,proto3" json:"offer_id,omitempty"`
	NodeId             string        `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Owner              string        `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	AvailableResources *ResourceSpec `protobuf:"bytes,4,opt,name=available_resources,json=availableResources,proto3" json:"available_resources,omitempty"`
	PricePerHour       uint64        `protobuf:"varint,5,opt,name=price_per_hour,json=pricePerHour,proto3" json:"price_per_hour,omitempty"`
	ContentTypes       []string      `protobuf:"bytes,6,rep,name=content_types,json=contentTypes,proto3" json:"content_types,omitempty"`
	Location           string        `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"`
	IsActive           bool          `protobuf:"varint,8,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	CreatedAt          int64         `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *ResourceOffer) Reset()         { *m = ResourceOffer{} }
func (m *ResourceOffer) String() string { return proto.CompactTextString(m) }
func (*ResourceOffer) ProtoMessage()    {}
func (*ResourceOffer) Descriptor() ([]byte, []int) {
	return fileDescriptor_003b72126aa2db70, []int{1}
}
func (m *ResourceOffer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceOffer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceOffer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceOffer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceOffer.Merge(m, src)
}
func (m *ResourceOffer) XXX_Size() int {
	return m.Size()
}
func (m *ResourceOffer) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceOffer.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceOffer proto.InternalMessageInfo

func (m *ResourceOffer) GetOfferId() string {
	if m != nil {
		return m.OfferId
	}
	return ""
}

func (m *ResourceOffer) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *ResourceOffer) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *ResourceOffer) GetAvailableResources() *ResourceSpec {
	if m != nil {
		return m.AvailableResources
	}
	return nil
}

func (m *ResourceOffer) GetPricePerHour() uint64 {
	if m != nil {
		return m.PricePerHour
	}
	return 0
}

func (m *ResourceOffer) GetContentTypes() []string {
	if m != nil {
		return m.ContentTypes
	}
	return nil
}

func (m *ResourceOffer) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *ResourceOffer) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *ResourceOffer) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

// Hub metrics for performance tracking
type HubMetrics struct {
	NodeId            string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	TotalAllocations  uint64 `protobuf:"varint,2,opt,name=total_allocations,json=totalAllocations,proto3" json:"total_allocations,omitempty"`
	ActiveAllocations uint64 `protobuf:"varint,3,opt,name=active_allocations,json=activeAllocations,proto3" json:"active_allocations,omitempty"`
	TotalRevenue      uint64 `protobuf:"varint,4,opt,name=total_revenue,json=totalRevenue,proto3" json:"total_revenue,omitempty"`
	UptimeSeconds     uint64 `protobuf:"varint,5,opt,name=uptime_seconds,json=uptimeSeconds,proto3" json:"uptime_seconds,omitempty"`
	DataServedGb      uint64 `protobuf:"varint,6,opt,name=data_served_gb,json=dataServedGb,proto3" json:"data_served_gb,omitempty"`
	LastUpdated       int64  `protobuf:"varint,7,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
}

func (m *HubMetrics) Reset()         { *m = HubMetrics{} }
func (m *HubMetrics) String() string { return proto.CompactTextString(m) }
func (*HubMetrics) ProtoMessage()    {}
func (*HubMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_003b72126aa2db70, []int{2}
}
func (m *HubMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HubMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HubMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HubMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HubMetrics.Merge(m, src)
}
func (m *HubMetrics) XXX_Size() int {
	return m.Size()
}
func (m *HubMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_HubMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_HubMetrics proto.InternalMessageInfo

func (m *HubMetrics) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *HubMetrics) GetTotalAllocations() uint64 {
	if m != nil {
		return m.TotalAllocations
	}
	return 0
}

func (m *HubMetrics) GetActiveAllocations() uint64 {
	if m != nil {
		return m.ActiveAllocations
	}
	return 0
}

func (m *HubMetrics) GetTotalRevenue() uint64 {
	if m != nil {
		return m.TotalRevenue
	}
	return 0
}

func (m *HubMetrics) GetUptimeSeconds() uint64 {
	if m != nil {
		return m.UptimeSeconds
	}
	return 0
}

func (m *HubMetrics) GetDataServedGb() uint64 {
	if m != nil {
		return m.DataServedGb
	}
	return 0
}

func (m *HubMetrics) GetLastUpdated() int64 {
	if m != nil {
		return m.LastUpdated
	}
	return 0
}

func init() {
	proto.RegisterType((*ResourceAllocation)(nil), "resist.rewards.v1.ResourceAllocation")
	proto.RegisterType((*ResourceOffer)(nil), "resist.rewards.v1.ResourceOffer")
	proto.RegisterType((*HubMetrics)(nil), "resist.rewards.v1.HubMetrics")
}

func init() {
	proto.RegisterFile("resist/rewards/v1/resource_allocation.proto", fileDescriptor_003b72126aa2db70)
}

var fileDescriptor_003b72126aa2db70 = []byte{
	// 623 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xeb, 0x24, 0x4d, 0xe2, 0x49, 0x52, 0xd1, 0x05, 0x15, 0x53, 0xda, 0x10, 0x52, 0x90,
	0x22, 0x55, 0xa4, 0x14, 0x9e, 0xa0, 0x70, 0xa0, 0x3d, 0x20, 0x2a, 0xb7, 0x5c, 0xb8, 0x58, 0x1b,
	0xef, 0x14, 0x2c, 0xa5, 0x5e, 0xb3, 0xbb, 0x4e, 0xe1, 0x2d, 0x38, 0xf1, 0x4c, 0x3d, 0xa1, 0x1e,
	0x39, 0xa2, 0xf6, 0x45, 0xd0, 0xce, 0xfa, 0xa3, 0x51, 0x2f, 0xbd, 0x79, 0x7e, 0xf3, 0xe1, 0x9d,
	0xff, 0xcc, 0x2e, 0xec, 0x2a, 0xd4, 0x89, 0x36, 0x7b, 0x0a, 0x2f, 0xb8, 0x12, 0x7a, 0x6f, 0xb1,
	0xbf, 0xa7, 0x50, 0xcb, 0x5c, 0xc5, 0x18, 0xf1, 0xf9, 0x5c, 0xc6, 0xdc, 0x24, 0x32, 0x9d, 0x66,
	0x4a, 0x1a, 0xc9, 0xd6, 0x5d, 0xf0, 0xb4, 0x08, 0x9e, 0x2e, 0xf6, 0x37, 0xb7, 0xee, 0xe6, 0xa7,
	0x52, 0xa0, 0x4b, 0x18, 0x5f, 0x36, 0x81, 0x85, 0x45, 0xb9, 0x83, 0xaa, 0x1a, 0xdb, 0x81, 0x41,
	0x5d, 0x3b, 0x4a, 0x44, 0xe0, 0x8d, 0xbc, 0x89, 0x1f, 0xf6, 0x6b, 0x78, 0x24, 0xd8, 0x36, 0x40,
	0x2c, 0x53, 0x83, 0xa9, 0xb1, 0x11, 0x0d, 0x8a, 0xf0, 0x0b, 0x72, 0x24, 0xd8, 0x63, 0xe8, 0xd8,
	0x1f, 0x59, 0x5f, 0x93, 0x7c, 0x6d, 0x6b, 0x1e, 0x09, 0xb6, 0x05, 0xbe, 0xc2, 0xef, 0x39, 0x6a,
	0x83, 0x2a, 0x68, 0xb9, 0xb4, 0x0a, 0xb0, 0x63, 0x78, 0x58, 0x1a, 0x22, 0x2a, 0x3b, 0xd5, 0xc1,
	0xea, 0xc8, 0x9b, 0xf4, 0xde, 0x3c, 0x9b, 0xde, 0x69, 0x70, 0x5a, 0x1e, 0xff, 0x24, 0xc3, 0x38,
	0x64, 0x55, 0x6e, 0x89, 0xb5, 0xad, 0x58, 0x9c, 0x7b, 0xa9, 0x62, 0xfb, 0x9e, 0x15, 0xab, 0xdc,
	0xba, 0xe2, 0x36, 0x80, 0x36, 0x5c, 0x99, 0xc8, 0x24, 0xe7, 0x18, 0x74, 0x46, 0xde, 0xa4, 0x19,
	0xfa, 0x44, 0x4e, 0x93, 0x73, 0x64, 0x4f, 0xa0, 0x8b, 0xa9, 0x70, 0xce, 0x2e, 0x39, 0x3b, 0x98,
	0x0a, 0x72, 0x6d, 0x40, 0x5b, 0x1b, 0x6e, 0x72, 0x1d, 0xf8, 0x4e, 0x13, 0x67, 0xb1, 0x31, 0x0c,
	0x62, 0xa9, 0x4d, 0x94, 0xa1, 0x8a, 0xbe, 0xc9, 0x5c, 0x05, 0x30, 0xf2, 0x26, 0xad, 0xb0, 0x67,
	0xe1, 0x31, 0xaa, 0x43, 0x99, 0x2b, 0xfb, 0x57, 0x23, 0x0d, 0x9f, 0x47, 0x16, 0x06, 0x3d, 0x0a,
	0xf0, 0x89, 0xbc, 0x97, 0xda, 0x8c, 0xff, 0x34, 0x60, 0x50, 0x1e, 0xf1, 0xd3, 0xd9, 0x19, 0x2a,
	0x7b, 0x0e, 0x69, 0x3f, 0xea, 0x01, 0x76, 0xc8, 0x5e, 0x1e, 0x4e, 0x63, 0x69, 0x38, 0x8f, 0x60,
	0x55, 0x5e, 0xa4, 0xa8, 0x8a, 0x99, 0x39, 0x83, 0x24, 0x5c, 0xf0, 0x64, 0xce, 0x67, 0x73, 0xbc,
	0x25, 0x61, 0xeb, 0xbe, 0x12, 0x96, 0xb9, 0xb5, 0x84, 0x2f, 0x60, 0x2d, 0x53, 0x49, 0x8c, 0x75,
	0xc7, 0xab, 0xd4, 0x50, 0x9f, 0x68, 0xd9, 0xf2, 0x8e, 0x95, 0xc5, 0xad, 0x98, 0xf9, 0x99, 0xd1,
	0xd0, 0x9a, 0x76, 0x0f, 0x0b, 0x78, 0x6a, 0x19, 0xdb, 0x84, 0x6e, 0xb9, 0x95, 0x34, 0x0b, 0x3f,
	0xac, 0x6c, 0xf6, 0x14, 0xfc, 0x44, 0x47, 0x3c, 0x36, 0xc9, 0xc2, 0xcd, 0xa2, 0x1b, 0x76, 0x13,
	0x7d, 0x40, 0x36, 0x2d, 0xb0, 0x42, 0x5a, 0x0b, 0x6e, 0x68, 0x20, 0xcd, 0xd0, 0x2f, 0xc8, 0x81,
	0x19, 0xff, 0x6e, 0x00, 0x1c, 0xe6, 0xb3, 0x8f, 0x68, 0x54, 0x12, 0xeb, 0xdb, 0x92, 0x79, 0x4b,
	0x92, 0xed, 0xc2, 0xba, 0x9b, 0x4b, 0x7d, 0x3b, 0x34, 0xa9, 0xda, 0x0a, 0x1f, 0x90, 0xa3, 0xbe,
	0x58, 0x9a, 0xbd, 0x02, 0xe6, 0x4e, 0xb3, 0x14, 0xdd, 0xa4, 0xe8, 0x75, 0xe7, 0xb9, 0x1d, 0xbe,
	0x03, 0x03, 0x57, 0x5b, 0xe1, 0x02, 0xd3, 0x1c, 0x49, 0xf2, 0x56, 0xd8, 0x27, 0x18, 0x3a, 0xc6,
	0x5e, 0xc2, 0x5a, 0x9e, 0xd9, 0x6d, 0x8b, 0x34, 0xc6, 0x32, 0x15, 0xba, 0xd0, 0x72, 0xe0, 0xe8,
	0x89, 0x83, 0x56, 0x72, 0xc1, 0x0d, 0x8f, 0x34, 0xaa, 0x05, 0x8a, 0xe8, 0xeb, 0x8c, 0xae, 0x40,
	0x2b, 0xec, 0x5b, 0x7a, 0x42, 0xf0, 0xc3, 0x8c, 0x3d, 0x87, 0xfe, 0x9c, 0x6b, 0x13, 0xe5, 0x99,
	0xb0, 0x3a, 0x14, 0xdb, 0xdd, 0xb3, 0xec, 0xb3, 0x43, 0xef, 0x5e, 0x5f, 0x5e, 0x0f, 0xbd, 0xab,
	0xeb, 0xa1, 0xf7, 0xef, 0x7a, 0xe8, 0xfd, 0xba, 0x19, 0xae, 0x5c, 0xdd, 0x0c, 0x57, 0xfe, 0xde,
	0x0c, 0x57, 0xbe, 0x6c, 0x14, 0x8f, 0xcd, 0x8f, 0xea, 0xb9, 0xa1, 0xb1, 0xcd, 0xda, 0xf4, 0xda,
	0xbc, 0xfd, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x36, 0x14, 0x0c, 0x3c, 0xcd, 0x04, 0x00, 0x00,
}

func (m *ResourceAllocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceAllocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceAllocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalCost != 0 {
		i = encodeVarintResourceAllocation(dAtA, i, uint64(m.TotalCost))
		i--
		dAtA[i] = 0x58
	}
	if m.CostPerHour != 0 {
		i = encodeVarintResourceAllocation(dAtA, i, uint64(m.CostPerHour))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintResourceAllocation(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x4a
	}
	if m.EndTime != 0 {
		i = encodeVarintResourceAllocation(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x40
	}
	if m.StartTime != 0 {
		i = encodeVarintResourceAllocation(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x38
	}
	if m.AllocatedResources != nil {
		{
			size, err := m.AllocatedResources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResourceAllocation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.RequestedResources != nil {
		{
			size, err := m.RequestedResources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResourceAllocation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintResourceAllocation(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintResourceAllocation(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContentId) > 0 {
		i -= len(m.ContentId)
		copy(dAtA[i:], m.ContentId)
		i = encodeVarintResourceAllocation(dAtA, i, uint64(len(m.ContentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AllocationId) > 0 {
		i -= len(m.AllocationId)
		copy(dAtA[i:], m.AllocationId)
		i = encodeVarintResourceAllocation(dAtA, i, uint64(len(m.AllocationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourceOffer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceOffer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceOffer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != 0 {
		i = encodeVarintResourceAllocation(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x48
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintResourceAllocation(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ContentTypes) > 0 {
		for iNdEx := len(m.ContentTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ContentTypes[iNdEx])
			copy(dAtA[i:], m.ContentTypes[iNdEx])
			i = encodeVarintResourceAllocation(dAtA, i, uint64(len(m.ContentTypes[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.PricePerHour != 0 {
		i = encodeVarintResourceAllocation(dAtA, i, uint64(m.PricePerHour))
		i--
		dAtA[i] = 0x28
	}
	if m.AvailableResources != nil {
		{
			size, err := m.AvailableResources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResourceAllocation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintResourceAllocation(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintResourceAllocation(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OfferId) > 0 {
		i -= len(m.OfferId)
		copy(dAtA[i:], m.OfferId)
		i = encodeVarintResourceAllocation(dAtA, i, uint64(len(m.OfferId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HubMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HubMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HubMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastUpdated != 0 {
		i = encodeVarintResourceAllocation(dAtA, i, uint64(m.LastUpdated))
		i--
		dAtA[i] = 0x38
	}
	if m.DataServedGb != 0 {
		i = encodeVarintResourceAllocation(dAtA, i, uint64(m.DataServedGb))
		i--
		dAtA[i] = 0x30
	}
	if m.UptimeSeconds != 0 {
		i = encodeVarintResourceAllocation(dAtA, i, uint64(m.UptimeSeconds))
		i--
		dAtA[i] = 0x28
	}
	if m.TotalRevenue != 0 {
		i = encodeVarintResourceAllocation(dAtA, i, uint64(m.TotalRevenue))
		i--
		dAtA[i] = 0x20
	}
	if m.ActiveAllocations != 0 {
		i = encodeVarintResourceAllocation(dAtA, i, uint64(m.ActiveAllocations))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalAllocations != 0 {
		i = encodeVarintResourceAllocation(dAtA, i, uint64(m.TotalAllocations))
		i--
		dAtA[i] = 0x10
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintResourceAllocation(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintResourceAllocation(dAtA []byte, offset int, v uint64) int {
	offset -= sovResourceAllocation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ResourceAllocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AllocationId)
	if l > 0 {
		n += 1 + l + sovResourceAllocation(uint64(l))
	}
	l = len(m.ContentId)
	if l > 0 {
		n += 1 + l + sovResourceAllocation(uint64(l))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovResourceAllocation(uint64(l))
	}
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovResourceAllocation(uint64(l))
	}
	if m.RequestedResources != nil {
		l = m.RequestedResources.Size()
		n += 1 + l + sovResourceAllocation(uint64(l))
	}
	if m.AllocatedResources != nil {
		l = m.AllocatedResources.Size()
		n += 1 + l + sovResourceAllocation(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovResourceAllocation(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovResourceAllocation(uint64(m.EndTime))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovResourceAllocation(uint64(l))
	}
	if m.CostPerHour != 0 {
		n += 1 + sovResourceAllocation(uint64(m.CostPerHour))
	}
	if m.TotalCost != 0 {
		n += 1 + sovResourceAllocation(uint64(m.TotalCost))
	}
	return n
}

func (m *ResourceOffer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OfferId)
	if l > 0 {
		n += 1 + l + sovResourceAllocation(uint64(l))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovResourceAllocation(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovResourceAllocation(uint64(l))
	}
	if m.AvailableResources != nil {
		l = m.AvailableResources.Size()
		n += 1 + l + sovResourceAllocation(uint64(l))
	}
	if m.PricePerHour != 0 {
		n += 1 + sovResourceAllocation(uint64(m.PricePerHour))
	}
	if len(m.ContentTypes) > 0 {
		for _, s := range m.ContentTypes {
			l = len(s)
			n += 1 + l + sovResourceAllocation(uint64(l))
		}
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovResourceAllocation(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	if m.CreatedAt != 0 {
		n += 1 + sovResourceAllocation(uint64(m.CreatedAt))
	}
	return n
}

func (m *HubMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovResourceAllocation(uint64(l))
	}
	if m.TotalAllocations != 0 {
		n += 1 + sovResourceAllocation(uint64(m.TotalAllocations))
	}
	if m.ActiveAllocations != 0 {
		n += 1 + sovResourceAllocation(uint64(m.ActiveAllocations))
	}
	if m.TotalRevenue != 0 {
		n += 1 + sovResourceAllocation(uint64(m.TotalRevenue))
	}
	if m.UptimeSeconds != 0 {
		n += 1 + sovResourceAllocation(uint64(m.UptimeSeconds))
	}
	if m.DataServedGb != 0 {
		n += 1 + sovResourceAllocation(uint64(m.DataServedGb))
	}
	if m.LastUpdated != 0 {
		n += 1 + sovResourceAllocation(uint64(m.LastUpdated))
	}
	return n
}

func sovResourceAllocation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozResourceAllocation(x uint64) (n int) {
	return sovResourceAllocation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ResourceAllocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourceAllocation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceAllocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceAllocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllocationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestedResources == nil {
				m.RequestedResources = &ResourceSpec{}
			}
			if err := m.RequestedResources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatedResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllocatedResources == nil {
				m.AllocatedResources = &ResourceSpec{}
			}
			if err := m.AllocatedResources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CostPerHour", wireType)
			}
			m.CostPerHour = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CostPerHour |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCost", wireType)
			}
			m.TotalCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCost |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipResourceAllocation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceOffer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourceAllocation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceOffer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceOffer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OfferId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AvailableResources == nil {
				m.AvailableResources = &ResourceSpec{}
			}
			if err := m.AvailableResources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PricePerHour", wireType)
			}
			m.PricePerHour = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PricePerHour |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentTypes = append(m.ContentTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipResourceAllocation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HubMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourceAllocation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HubMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HubMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAllocations", wireType)
			}
			m.TotalAllocations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalAllocations |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveAllocations", wireType)
			}
			m.ActiveAllocations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveAllocations |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRevenue", wireType)
			}
			m.TotalRevenue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRevenue |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UptimeSeconds", wireType)
			}
			m.UptimeSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UptimeSeconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataServedGb", wireType)
			}
			m.DataServedGb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataServedGb |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdated", wireType)
			}
			m.LastUpdated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdated |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipResourceAllocation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourceAllocation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipResourceAllocation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowResourceAllocation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResourceAllocation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthResourceAllocation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupResourceAllocation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthResourceAllocation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthResourceAllocation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowResourceAllocation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupResourceAllocation = fmt.Errorf("proto: unexpected end of group")
)
