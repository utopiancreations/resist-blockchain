// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: resist/rewards/v1/node.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Node represents a registered node in the rewards system
type Node struct {
	NodeId      string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Owner       string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	NodeType    string `protobuf:"bytes,3,opt,name=node_type,json=nodeType,proto3" json:"node_type,omitempty"`
	StakeAmount uint64 `protobuf:"varint,4,opt,name=stake_amount,json=stakeAmount,proto3" json:"stake_amount,omitempty"`
	CreatedAt   int64  `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	IsActive    bool   `protobuf:"varint,6,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// Resource allocation fields for hub functionality
	AvailableResources    *ResourceSpec `protobuf:"bytes,7,opt,name=available_resources,json=availableResources,proto3" json:"available_resources,omitempty"`
	AllocatedResources    *ResourceSpec `protobuf:"bytes,8,opt,name=allocated_resources,json=allocatedResources,proto3" json:"allocated_resources,omitempty"`
	Location              string        `protobuf:"bytes,9,opt,name=location,proto3" json:"location,omitempty"`
	SupportedContentTypes []string      `protobuf:"bytes,10,rep,name=supported_content_types,json=supportedContentTypes,proto3" json:"supported_content_types,omitempty"`
	UptimePercentage      uint64        `protobuf:"varint,11,opt,name=uptime_percentage,json=uptimePercentage,proto3" json:"uptime_percentage,omitempty"`
	BandwidthMbps         uint64        `protobuf:"varint,12,opt,name=bandwidth_mbps,json=bandwidthMbps,proto3" json:"bandwidth_mbps,omitempty"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_82993714691a2f03, []int{0}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return m.Size()
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *Node) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Node) GetNodeType() string {
	if m != nil {
		return m.NodeType
	}
	return ""
}

func (m *Node) GetStakeAmount() uint64 {
	if m != nil {
		return m.StakeAmount
	}
	return 0
}

func (m *Node) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Node) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *Node) GetAvailableResources() *ResourceSpec {
	if m != nil {
		return m.AvailableResources
	}
	return nil
}

func (m *Node) GetAllocatedResources() *ResourceSpec {
	if m != nil {
		return m.AllocatedResources
	}
	return nil
}

func (m *Node) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Node) GetSupportedContentTypes() []string {
	if m != nil {
		return m.SupportedContentTypes
	}
	return nil
}

func (m *Node) GetUptimePercentage() uint64 {
	if m != nil {
		return m.UptimePercentage
	}
	return 0
}

func (m *Node) GetBandwidthMbps() uint64 {
	if m != nil {
		return m.BandwidthMbps
	}
	return 0
}

// ResourceSpec defines the computing resources available/allocated
type ResourceSpec struct {
	CpuCores      uint64 `protobuf:"varint,1,opt,name=cpu_cores,json=cpuCores,proto3" json:"cpu_cores,omitempty"`
	MemoryGb      uint64 `protobuf:"varint,2,opt,name=memory_gb,json=memoryGb,proto3" json:"memory_gb,omitempty"`
	StorageGb     uint64 `protobuf:"varint,3,opt,name=storage_gb,json=storageGb,proto3" json:"storage_gb,omitempty"`
	BandwidthMbps uint64 `protobuf:"varint,4,opt,name=bandwidth_mbps,json=bandwidthMbps,proto3" json:"bandwidth_mbps,omitempty"`
}

func (m *ResourceSpec) Reset()         { *m = ResourceSpec{} }
func (m *ResourceSpec) String() string { return proto.CompactTextString(m) }
func (*ResourceSpec) ProtoMessage()    {}
func (*ResourceSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_82993714691a2f03, []int{1}
}
func (m *ResourceSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceSpec.Merge(m, src)
}
func (m *ResourceSpec) XXX_Size() int {
	return m.Size()
}
func (m *ResourceSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceSpec proto.InternalMessageInfo

func (m *ResourceSpec) GetCpuCores() uint64 {
	if m != nil {
		return m.CpuCores
	}
	return 0
}

func (m *ResourceSpec) GetMemoryGb() uint64 {
	if m != nil {
		return m.MemoryGb
	}
	return 0
}

func (m *ResourceSpec) GetStorageGb() uint64 {
	if m != nil {
		return m.StorageGb
	}
	return 0
}

func (m *ResourceSpec) GetBandwidthMbps() uint64 {
	if m != nil {
		return m.BandwidthMbps
	}
	return 0
}

func init() {
	proto.RegisterType((*Node)(nil), "resist.rewards.v1.Node")
	proto.RegisterType((*ResourceSpec)(nil), "resist.rewards.v1.ResourceSpec")
}

func init() { proto.RegisterFile("resist/rewards/v1/node.proto", fileDescriptor_82993714691a2f03) }

var fileDescriptor_82993714691a2f03 = []byte{
	// 466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcd, 0x8e, 0xd3, 0x30,
	0x14, 0x85, 0x6b, 0x92, 0xe9, 0x24, 0x6e, 0x41, 0x8c, 0xf9, 0x19, 0x8b, 0x9f, 0x10, 0x46, 0x42,
	0x8a, 0x84, 0x94, 0x32, 0x20, 0xb1, 0x2f, 0xb3, 0x18, 0xb1, 0x00, 0x8d, 0x02, 0x2b, 0x36, 0x91,
	0xe3, 0x5c, 0x95, 0x88, 0x26, 0xb6, 0x6c, 0xa7, 0xa5, 0x2f, 0x81, 0x78, 0x2c, 0x96, 0xb3, 0x64,
	0x89, 0xda, 0xe7, 0x40, 0x42, 0x76, 0xd2, 0x0c, 0x12, 0xb3, 0x60, 0x79, 0xbf, 0x73, 0x7d, 0x62,
	0x9f, 0x1c, 0xfc, 0x48, 0x81, 0xae, 0xb4, 0x99, 0x29, 0x58, 0x33, 0x55, 0xea, 0xd9, 0xea, 0x74,
	0xd6, 0x88, 0x12, 0x52, 0xa9, 0x84, 0x11, 0xe4, 0xa8, 0x53, 0xd3, 0x5e, 0x4d, 0x57, 0xa7, 0x27,
	0xbf, 0x3d, 0xec, 0xbf, 0x17, 0x25, 0x90, 0x63, 0x7c, 0x68, 0x37, 0xf3, 0xaa, 0xa4, 0x28, 0x46,
	0x49, 0x98, 0x8d, 0xed, 0xf8, 0xb6, 0x24, 0x77, 0xf1, 0x81, 0x58, 0x37, 0xa0, 0xe8, 0x0d, 0x87,
	0xbb, 0x81, 0x3c, 0xc4, 0xa1, 0x5b, 0x37, 0x1b, 0x09, 0xd4, 0x73, 0x4a, 0x60, 0xc1, 0xc7, 0x8d,
	0x04, 0xf2, 0x14, 0x4f, 0xb5, 0x61, 0x5f, 0x20, 0x67, 0xb5, 0x68, 0x1b, 0x43, 0xfd, 0x18, 0x25,
	0x7e, 0x36, 0x71, 0x6c, 0xee, 0x10, 0x79, 0x8c, 0x31, 0x57, 0xc0, 0x0c, 0x94, 0x39, 0x33, 0xf4,
	0x20, 0x46, 0x89, 0x97, 0x85, 0x3d, 0x99, 0x1b, 0x6b, 0x5f, 0xe9, 0x9c, 0x71, 0x53, 0xad, 0x80,
	0x8e, 0x63, 0x94, 0x04, 0x59, 0x50, 0xe9, 0xb9, 0x9b, 0xc9, 0x05, 0xbe, 0xc3, 0x56, 0xac, 0x5a,
	0xb2, 0x62, 0x09, 0xb9, 0x02, 0x2d, 0x5a, 0xc5, 0x41, 0xd3, 0xc3, 0x18, 0x25, 0x93, 0x97, 0x4f,
	0xd2, 0x7f, 0x1e, 0x99, 0x66, 0xfd, 0xce, 0x07, 0x09, 0x3c, 0x23, 0xc3, 0xd9, 0x3d, 0xd6, 0xce,
	0x71, 0xb9, 0x14, 0xdc, 0xdd, 0xe7, 0xca, 0x31, 0xf8, 0x5f, 0xc7, 0xfd, 0xd9, 0x2b, 0xc7, 0x07,
	0x38, 0x70, 0xac, 0x12, 0x0d, 0x0d, 0xbb, 0x78, 0xf6, 0x33, 0x79, 0x8d, 0x8f, 0x75, 0x2b, 0xa5,
	0x50, 0xf6, 0x6b, 0x5c, 0x34, 0x06, 0x1a, 0xe3, 0x82, 0xd4, 0x14, 0xc7, 0x5e, 0x12, 0x66, 0xf7,
	0x06, 0xf9, 0xac, 0x53, 0x6d, 0xaa, 0x9a, 0x3c, 0xc7, 0x47, 0xad, 0x34, 0x55, 0x0d, 0xb9, 0x04,
	0xc5, 0xa1, 0x31, 0x6c, 0x01, 0x74, 0xe2, 0xb2, 0xbd, 0xdd, 0x09, 0x17, 0x03, 0x27, 0xcf, 0xf0,
	0xad, 0x82, 0x35, 0xe5, 0xba, 0x2a, 0xcd, 0xe7, 0xbc, 0x2e, 0xa4, 0xa6, 0x53, 0xb7, 0x79, 0x73,
	0xa0, 0xef, 0x0a, 0xa9, 0x4f, 0xbe, 0x21, 0x3c, 0xfd, 0xfb, 0x31, 0x36, 0x79, 0x2e, 0xdb, 0x9c,
	0x0b, 0x05, 0xda, 0x35, 0xc1, 0xcf, 0x02, 0x2e, 0xdb, 0x33, 0x3b, 0x5b, 0xb1, 0x86, 0x5a, 0xa8,
	0x4d, 0xbe, 0x28, 0x5c, 0x1f, 0xfc, 0x2c, 0xe8, 0xc0, 0x79, 0x61, 0x7f, 0xa9, 0x36, 0x42, 0xb1,
	0x05, 0x58, 0xd5, 0x73, 0x6a, 0xd8, 0x93, 0xf3, 0xe2, 0x9a, 0x0b, 0xf9, 0xd7, 0x5c, 0xe8, 0xcd,
	0x8b, 0x1f, 0xdb, 0x08, 0x5d, 0x6e, 0x23, 0xf4, 0x6b, 0x1b, 0xa1, 0xef, 0xbb, 0x68, 0x74, 0xb9,
	0x8b, 0x46, 0x3f, 0x77, 0xd1, 0xe8, 0xd3, 0xfd, 0xbe, 0xdb, 0x5f, 0x87, 0x76, 0xbb, 0xcc, 0x8a,
	0xb1, 0x2b, 0xf7, 0xab, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x65, 0x87, 0x5c, 0x78, 0xfc, 0x02,
	0x00, 0x00,
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BandwidthMbps != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.BandwidthMbps))
		i--
		dAtA[i] = 0x60
	}
	if m.UptimePercentage != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.UptimePercentage))
		i--
		dAtA[i] = 0x58
	}
	if len(m.SupportedContentTypes) > 0 {
		for iNdEx := len(m.SupportedContentTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SupportedContentTypes[iNdEx])
			copy(dAtA[i:], m.SupportedContentTypes[iNdEx])
			i = encodeVarintNode(dAtA, i, uint64(len(m.SupportedContentTypes[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x4a
	}
	if m.AllocatedResources != nil {
		{
			size, err := m.AllocatedResources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.AvailableResources != nil {
		{
			size, err := m.AvailableResources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.CreatedAt != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x28
	}
	if m.StakeAmount != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.StakeAmount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.NodeType) > 0 {
		i -= len(m.NodeType)
		copy(dAtA[i:], m.NodeType)
		i = encodeVarintNode(dAtA, i, uint64(len(m.NodeType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintNode(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourceSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BandwidthMbps != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.BandwidthMbps))
		i--
		dAtA[i] = 0x20
	}
	if m.StorageGb != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.StorageGb))
		i--
		dAtA[i] = 0x18
	}
	if m.MemoryGb != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.MemoryGb))
		i--
		dAtA[i] = 0x10
	}
	if m.CpuCores != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.CpuCores))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNode(dAtA []byte, offset int, v uint64) int {
	offset -= sovNode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.NodeType)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if m.StakeAmount != 0 {
		n += 1 + sovNode(uint64(m.StakeAmount))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovNode(uint64(m.CreatedAt))
	}
	if m.IsActive {
		n += 2
	}
	if m.AvailableResources != nil {
		l = m.AvailableResources.Size()
		n += 1 + l + sovNode(uint64(l))
	}
	if m.AllocatedResources != nil {
		l = m.AllocatedResources.Size()
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if len(m.SupportedContentTypes) > 0 {
		for _, s := range m.SupportedContentTypes {
			l = len(s)
			n += 1 + l + sovNode(uint64(l))
		}
	}
	if m.UptimePercentage != 0 {
		n += 1 + sovNode(uint64(m.UptimePercentage))
	}
	if m.BandwidthMbps != 0 {
		n += 1 + sovNode(uint64(m.BandwidthMbps))
	}
	return n
}

func (m *ResourceSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CpuCores != 0 {
		n += 1 + sovNode(uint64(m.CpuCores))
	}
	if m.MemoryGb != 0 {
		n += 1 + sovNode(uint64(m.MemoryGb))
	}
	if m.StorageGb != 0 {
		n += 1 + sovNode(uint64(m.StorageGb))
	}
	if m.BandwidthMbps != 0 {
		n += 1 + sovNode(uint64(m.BandwidthMbps))
	}
	return n
}

func sovNode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNode(x uint64) (n int) {
	return sovNode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeAmount", wireType)
			}
			m.StakeAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakeAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AvailableResources == nil {
				m.AvailableResources = &ResourceSpec{}
			}
			if err := m.AvailableResources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatedResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllocatedResources == nil {
				m.AllocatedResources = &ResourceSpec{}
			}
			if err := m.AllocatedResources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedContentTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportedContentTypes = append(m.SupportedContentTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UptimePercentage", wireType)
			}
			m.UptimePercentage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UptimePercentage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BandwidthMbps", wireType)
			}
			m.BandwidthMbps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BandwidthMbps |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuCores", wireType)
			}
			m.CpuCores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuCores |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryGb", wireType)
			}
			m.MemoryGb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryGb |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageGb", wireType)
			}
			m.StorageGb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageGb |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BandwidthMbps", wireType)
			}
			m.BandwidthMbps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BandwidthMbps |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNode = fmt.Errorf("proto: unexpected end of group")
)
